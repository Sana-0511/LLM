Prompt,Code
"Write python functions to make a machine learning Linear regression model based on a dataset named AmesHousing.csv having columns ['Order', 'PID', 'MS SubClass', 'MS Zoning', 'Lot Frontage', 'Lot Area', 'Street', 'Alley', 'Lot Shape', 'Land Contour', 'Utilities', 'Lot Config', 'Land Slope', 'Neighborhood', 'Condition 1', 'Condition 2', 'Bldg Type', 'House Style', 'Overall Qual', 'Overall Cond', 'Year Built', 'Year Remod/Add', 'Roof Style', 'Roof Matl', 'Exterior 1st', 'Exterior 2nd', 'Mas Vnr Type', 'Mas Vnr Area', 'Exter Qual', 'Exter Cond', 'Foundation', 'Bsmt Qual', 'Bsmt Cond', 'Bsmt Exposure', 'BsmtFin Type 1', 'BsmtFin SF 1', 'BsmtFin Type 2', 'BsmtFin SF 2', 'Bsmt Unf SF', 'Total Bsmt SF', 'Heating', 'Heating QC', 'Central Air', 'Electrical', '1st Flr SF', '2nd Flr SF', 'Low Qual Fin SF', 'Gr Liv Area', 'Bsmt Full Bath', 'Bsmt Half Bath', 'Full Bath', 'Half Bath', 'Bedroom AbvGr', 'Kitchen AbvGr', 'Kitchen Qual', 'TotRms AbvGrd', 'Functional', 'Fireplaces', 'Fireplace Qu', 'Garage Type', 'Garage Yr Blt', 'Garage Finish', 'Garage Cars', 'Garage Area', 'Garage Qual', 'Garage Cond', 'Paved Drive', 'Wood Deck SF', 'Open Porch SF', 'Enclosed Porch', '3Ssn Porch', 'Screen Porch', 'Pool Area', 'Pool QC', 'Fence', 'Misc Feature', 'Misc Val', 'Mo Sold', 'Yr Sold', 'Sale Type', 'Sale Condition', 'SalePrice'] with the target variable being SalePrice having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/AmesHousing.csv_preprocessed.csv')
target_variable = 'SalePrice'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['Mo Sold','Misc Val','3Ssn Porch','Screen Porch','Pool QC','Fence','Misc Feature','Yr Sold',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Mo Sold','Misc Val','3Ssn Porch','Screen Porch','Pool QC','Fence','Misc Feature','Yr Sold',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named AmesHousing.csv having columns ['Order', 'PID', 'MS SubClass', 'MS Zoning', 'Lot Frontage', 'Lot Area', 'Street', 'Alley', 'Lot Shape', 'Land Contour', 'Utilities', 'Lot Config', 'Land Slope', 'Neighborhood', 'Condition 1', 'Condition 2', 'Bldg Type', 'House Style', 'Overall Qual', 'Overall Cond', 'Year Built', 'Year Remod/Add', 'Roof Style', 'Roof Matl', 'Exterior 1st', 'Exterior 2nd', 'Mas Vnr Type', 'Mas Vnr Area', 'Exter Qual', 'Exter Cond', 'Foundation', 'Bsmt Qual', 'Bsmt Cond', 'Bsmt Exposure', 'BsmtFin Type 1', 'BsmtFin SF 1', 'BsmtFin Type 2', 'BsmtFin SF 2', 'Bsmt Unf SF', 'Total Bsmt SF', 'Heating', 'Heating QC', 'Central Air', 'Electrical', '1st Flr SF', '2nd Flr SF', 'Low Qual Fin SF', 'Gr Liv Area', 'Bsmt Full Bath', 'Bsmt Half Bath', 'Full Bath', 'Half Bath', 'Bedroom AbvGr', 'Kitchen AbvGr', 'Kitchen Qual', 'TotRms AbvGrd', 'Functional', 'Fireplaces', 'Fireplace Qu', 'Garage Type', 'Garage Yr Blt', 'Garage Finish', 'Garage Cars', 'Garage Area', 'Garage Qual', 'Garage Cond', 'Paved Drive', 'Wood Deck SF', 'Open Porch SF', 'Enclosed Porch', '3Ssn Porch', 'Screen Porch', 'Pool Area', 'Pool QC', 'Fence', 'Misc Feature', 'Misc Val', 'Mo Sold', 'Yr Sold', 'Sale Type', 'Sale Condition', 'SalePrice'] with the target variable being SalePrice having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/AmesHousing.csv_preprocessed.csv')
target_variable = 'SalePrice'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Mo Sold','Misc Val','3Ssn Porch','Screen Porch','Pool QC','Fence','Misc Feature','Yr Sold',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Mo Sold','Misc Val','3Ssn Porch','Screen Porch','Pool QC','Fence','Misc Feature','Yr Sold',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named AmesHousing.csv having columns ['Order', 'PID', 'MS SubClass', 'MS Zoning', 'Lot Frontage', 'Lot Area', 'Street', 'Alley', 'Lot Shape', 'Land Contour', 'Utilities', 'Lot Config', 'Land Slope', 'Neighborhood', 'Condition 1', 'Condition 2', 'Bldg Type', 'House Style', 'Overall Qual', 'Overall Cond', 'Year Built', 'Year Remod/Add', 'Roof Style', 'Roof Matl', 'Exterior 1st', 'Exterior 2nd', 'Mas Vnr Type', 'Mas Vnr Area', 'Exter Qual', 'Exter Cond', 'Foundation', 'Bsmt Qual', 'Bsmt Cond', 'Bsmt Exposure', 'BsmtFin Type 1', 'BsmtFin SF 1', 'BsmtFin Type 2', 'BsmtFin SF 2', 'Bsmt Unf SF', 'Total Bsmt SF', 'Heating', 'Heating QC', 'Central Air', 'Electrical', '1st Flr SF', '2nd Flr SF', 'Low Qual Fin SF', 'Gr Liv Area', 'Bsmt Full Bath', 'Bsmt Half Bath', 'Full Bath', 'Half Bath', 'Bedroom AbvGr', 'Kitchen AbvGr', 'Kitchen Qual', 'TotRms AbvGrd', 'Functional', 'Fireplaces', 'Fireplace Qu', 'Garage Type', 'Garage Yr Blt', 'Garage Finish', 'Garage Cars', 'Garage Area', 'Garage Qual', 'Garage Cond', 'Paved Drive', 'Wood Deck SF', 'Open Porch SF', 'Enclosed Porch', '3Ssn Porch', 'Screen Porch', 'Pool Area', 'Pool QC', 'Fence', 'Misc Feature', 'Misc Val', 'Mo Sold', 'Yr Sold', 'Sale Type', 'Sale Condition', 'SalePrice'] with the target variable being SalePrice having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/AmesHousing.csv_preprocessed.csv')
target_variable = 'SalePrice'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['Mo Sold','Misc Val','3Ssn Porch','Screen Porch','Pool QC','Fence','Misc Feature','Yr Sold',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Mo Sold','Misc Val','3Ssn Porch','Screen Porch','Pool QC','Fence','Misc Feature','Yr Sold',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named AmesHousing.csv having columns ['Order', 'PID', 'MS SubClass', 'MS Zoning', 'Lot Frontage', 'Lot Area', 'Street', 'Alley', 'Lot Shape', 'Land Contour', 'Utilities', 'Lot Config', 'Land Slope', 'Neighborhood', 'Condition 1', 'Condition 2', 'Bldg Type', 'House Style', 'Overall Qual', 'Overall Cond', 'Year Built', 'Year Remod/Add', 'Roof Style', 'Roof Matl', 'Exterior 1st', 'Exterior 2nd', 'Mas Vnr Type', 'Mas Vnr Area', 'Exter Qual', 'Exter Cond', 'Foundation', 'Bsmt Qual', 'Bsmt Cond', 'Bsmt Exposure', 'BsmtFin Type 1', 'BsmtFin SF 1', 'BsmtFin Type 2', 'BsmtFin SF 2', 'Bsmt Unf SF', 'Total Bsmt SF', 'Heating', 'Heating QC', 'Central Air', 'Electrical', '1st Flr SF', '2nd Flr SF', 'Low Qual Fin SF', 'Gr Liv Area', 'Bsmt Full Bath', 'Bsmt Half Bath', 'Full Bath', 'Half Bath', 'Bedroom AbvGr', 'Kitchen AbvGr', 'Kitchen Qual', 'TotRms AbvGrd', 'Functional', 'Fireplaces', 'Fireplace Qu', 'Garage Type', 'Garage Yr Blt', 'Garage Finish', 'Garage Cars', 'Garage Area', 'Garage Qual', 'Garage Cond', 'Paved Drive', 'Wood Deck SF', 'Open Porch SF', 'Enclosed Porch', '3Ssn Porch', 'Screen Porch', 'Pool Area', 'Pool QC', 'Fence', 'Misc Feature', 'Misc Val', 'Mo Sold', 'Yr Sold', 'Sale Type', 'Sale Condition', 'SalePrice'] with the target variable being SalePrice having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/AmesHousing.csv_preprocessed.csv')
target_variable = 'SalePrice'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['Mo Sold','Misc Val','3Ssn Porch','Screen Porch','Pool QC','Fence','Misc Feature','Yr Sold',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Mo Sold','Misc Val','3Ssn Porch','Screen Porch','Pool QC','Fence','Misc Feature','Yr Sold',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named AmesHousing.csv having columns ['Order', 'PID', 'MS SubClass', 'MS Zoning', 'Lot Frontage', 'Lot Area', 'Street', 'Alley', 'Lot Shape', 'Land Contour', 'Utilities', 'Lot Config', 'Land Slope', 'Neighborhood', 'Condition 1', 'Condition 2', 'Bldg Type', 'House Style', 'Overall Qual', 'Overall Cond', 'Year Built', 'Year Remod/Add', 'Roof Style', 'Roof Matl', 'Exterior 1st', 'Exterior 2nd', 'Mas Vnr Type', 'Mas Vnr Area', 'Exter Qual', 'Exter Cond', 'Foundation', 'Bsmt Qual', 'Bsmt Cond', 'Bsmt Exposure', 'BsmtFin Type 1', 'BsmtFin SF 1', 'BsmtFin Type 2', 'BsmtFin SF 2', 'Bsmt Unf SF', 'Total Bsmt SF', 'Heating', 'Heating QC', 'Central Air', 'Electrical', '1st Flr SF', '2nd Flr SF', 'Low Qual Fin SF', 'Gr Liv Area', 'Bsmt Full Bath', 'Bsmt Half Bath', 'Full Bath', 'Half Bath', 'Bedroom AbvGr', 'Kitchen AbvGr', 'Kitchen Qual', 'TotRms AbvGrd', 'Functional', 'Fireplaces', 'Fireplace Qu', 'Garage Type', 'Garage Yr Blt', 'Garage Finish', 'Garage Cars', 'Garage Area', 'Garage Qual', 'Garage Cond', 'Paved Drive', 'Wood Deck SF', 'Open Porch SF', 'Enclosed Porch', '3Ssn Porch', 'Screen Porch', 'Pool Area', 'Pool QC', 'Fence', 'Misc Feature', 'Misc Val', 'Mo Sold', 'Yr Sold', 'Sale Type', 'Sale Condition', 'SalePrice'] with the target variable being SalePrice having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/AmesHousing.csv_preprocessed.csv')
target_variable = 'SalePrice'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['Mo Sold','Misc Val','3Ssn Porch','Screen Porch','Pool QC','Fence','Misc Feature','Yr Sold',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Mo Sold','Misc Val','3Ssn Porch','Screen Porch','Pool QC','Fence','Misc Feature','Yr Sold',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named AmesHousing.csv having columns ['Order', 'PID', 'MS SubClass', 'MS Zoning', 'Lot Frontage', 'Lot Area', 'Street', 'Alley', 'Lot Shape', 'Land Contour', 'Utilities', 'Lot Config', 'Land Slope', 'Neighborhood', 'Condition 1', 'Condition 2', 'Bldg Type', 'House Style', 'Overall Qual', 'Overall Cond', 'Year Built', 'Year Remod/Add', 'Roof Style', 'Roof Matl', 'Exterior 1st', 'Exterior 2nd', 'Mas Vnr Type', 'Mas Vnr Area', 'Exter Qual', 'Exter Cond', 'Foundation', 'Bsmt Qual', 'Bsmt Cond', 'Bsmt Exposure', 'BsmtFin Type 1', 'BsmtFin SF 1', 'BsmtFin Type 2', 'BsmtFin SF 2', 'Bsmt Unf SF', 'Total Bsmt SF', 'Heating', 'Heating QC', 'Central Air', 'Electrical', '1st Flr SF', '2nd Flr SF', 'Low Qual Fin SF', 'Gr Liv Area', 'Bsmt Full Bath', 'Bsmt Half Bath', 'Full Bath', 'Half Bath', 'Bedroom AbvGr', 'Kitchen AbvGr', 'Kitchen Qual', 'TotRms AbvGrd', 'Functional', 'Fireplaces', 'Fireplace Qu', 'Garage Type', 'Garage Yr Blt', 'Garage Finish', 'Garage Cars', 'Garage Area', 'Garage Qual', 'Garage Cond', 'Paved Drive', 'Wood Deck SF', 'Open Porch SF', 'Enclosed Porch', '3Ssn Porch', 'Screen Porch', 'Pool Area', 'Pool QC', 'Fence', 'Misc Feature', 'Misc Val', 'Mo Sold', 'Yr Sold', 'Sale Type', 'Sale Condition', 'SalePrice'] with the target variable being SalePrice having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/AmesHousing.csv_preprocessed.csv')
target_variable = 'SalePrice'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Mo Sold','Misc Val','3Ssn Porch','Screen Porch','Pool QC','Fence','Misc Feature','Yr Sold',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Mo Sold','Misc Val','3Ssn Porch','Screen Porch','Pool QC','Fence','Misc Feature','Yr Sold',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named AmesHousing.csv having columns ['Order', 'PID', 'MS SubClass', 'MS Zoning', 'Lot Frontage', 'Lot Area', 'Street', 'Alley', 'Lot Shape', 'Land Contour', 'Utilities', 'Lot Config', 'Land Slope', 'Neighborhood', 'Condition 1', 'Condition 2', 'Bldg Type', 'House Style', 'Overall Qual', 'Overall Cond', 'Year Built', 'Year Remod/Add', 'Roof Style', 'Roof Matl', 'Exterior 1st', 'Exterior 2nd', 'Mas Vnr Type', 'Mas Vnr Area', 'Exter Qual', 'Exter Cond', 'Foundation', 'Bsmt Qual', 'Bsmt Cond', 'Bsmt Exposure', 'BsmtFin Type 1', 'BsmtFin SF 1', 'BsmtFin Type 2', 'BsmtFin SF 2', 'Bsmt Unf SF', 'Total Bsmt SF', 'Heating', 'Heating QC', 'Central Air', 'Electrical', '1st Flr SF', '2nd Flr SF', 'Low Qual Fin SF', 'Gr Liv Area', 'Bsmt Full Bath', 'Bsmt Half Bath', 'Full Bath', 'Half Bath', 'Bedroom AbvGr', 'Kitchen AbvGr', 'Kitchen Qual', 'TotRms AbvGrd', 'Functional', 'Fireplaces', 'Fireplace Qu', 'Garage Type', 'Garage Yr Blt', 'Garage Finish', 'Garage Cars', 'Garage Area', 'Garage Qual', 'Garage Cond', 'Paved Drive', 'Wood Deck SF', 'Open Porch SF', 'Enclosed Porch', '3Ssn Porch', 'Screen Porch', 'Pool Area', 'Pool QC', 'Fence', 'Misc Feature', 'Misc Val', 'Mo Sold', 'Yr Sold', 'Sale Type', 'Sale Condition', 'SalePrice'] with the target variable being SalePrice having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/AmesHousing.csv_preprocessed.csv')
target_variable = 'SalePrice'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['Mo Sold','Misc Val','3Ssn Porch','Screen Porch','Pool QC','Fence','Misc Feature','Yr Sold',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Mo Sold','Misc Val','3Ssn Porch','Screen Porch','Pool QC','Fence','Misc Feature','Yr Sold',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named AmesHousing.csv having columns ['Order', 'PID', 'MS SubClass', 'MS Zoning', 'Lot Frontage', 'Lot Area', 'Street', 'Alley', 'Lot Shape', 'Land Contour', 'Utilities', 'Lot Config', 'Land Slope', 'Neighborhood', 'Condition 1', 'Condition 2', 'Bldg Type', 'House Style', 'Overall Qual', 'Overall Cond', 'Year Built', 'Year Remod/Add', 'Roof Style', 'Roof Matl', 'Exterior 1st', 'Exterior 2nd', 'Mas Vnr Type', 'Mas Vnr Area', 'Exter Qual', 'Exter Cond', 'Foundation', 'Bsmt Qual', 'Bsmt Cond', 'Bsmt Exposure', 'BsmtFin Type 1', 'BsmtFin SF 1', 'BsmtFin Type 2', 'BsmtFin SF 2', 'Bsmt Unf SF', 'Total Bsmt SF', 'Heating', 'Heating QC', 'Central Air', 'Electrical', '1st Flr SF', '2nd Flr SF', 'Low Qual Fin SF', 'Gr Liv Area', 'Bsmt Full Bath', 'Bsmt Half Bath', 'Full Bath', 'Half Bath', 'Bedroom AbvGr', 'Kitchen AbvGr', 'Kitchen Qual', 'TotRms AbvGrd', 'Functional', 'Fireplaces', 'Fireplace Qu', 'Garage Type', 'Garage Yr Blt', 'Garage Finish', 'Garage Cars', 'Garage Area', 'Garage Qual', 'Garage Cond', 'Paved Drive', 'Wood Deck SF', 'Open Porch SF', 'Enclosed Porch', '3Ssn Porch', 'Screen Porch', 'Pool Area', 'Pool QC', 'Fence', 'Misc Feature', 'Misc Val', 'Mo Sold', 'Yr Sold', 'Sale Type', 'Sale Condition', 'SalePrice'] with the target variable being SalePrice having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/AmesHousing.csv_preprocessed.csv')
target_variable = 'SalePrice'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['Mo Sold','Misc Val','3Ssn Porch','Screen Porch','Pool QC','Fence','Misc Feature','Yr Sold',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Mo Sold','Misc Val','3Ssn Porch','Screen Porch','Pool QC','Fence','Misc Feature','Yr Sold',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named AmesHousing.csv having columns ['Order', 'PID', 'MS SubClass', 'MS Zoning', 'Lot Frontage', 'Lot Area', 'Street', 'Alley', 'Lot Shape', 'Land Contour', 'Utilities', 'Lot Config', 'Land Slope', 'Neighborhood', 'Condition 1', 'Condition 2', 'Bldg Type', 'House Style', 'Overall Qual', 'Overall Cond', 'Year Built', 'Year Remod/Add', 'Roof Style', 'Roof Matl', 'Exterior 1st', 'Exterior 2nd', 'Mas Vnr Type', 'Mas Vnr Area', 'Exter Qual', 'Exter Cond', 'Foundation', 'Bsmt Qual', 'Bsmt Cond', 'Bsmt Exposure', 'BsmtFin Type 1', 'BsmtFin SF 1', 'BsmtFin Type 2', 'BsmtFin SF 2', 'Bsmt Unf SF', 'Total Bsmt SF', 'Heating', 'Heating QC', 'Central Air', 'Electrical', '1st Flr SF', '2nd Flr SF', 'Low Qual Fin SF', 'Gr Liv Area', 'Bsmt Full Bath', 'Bsmt Half Bath', 'Full Bath', 'Half Bath', 'Bedroom AbvGr', 'Kitchen AbvGr', 'Kitchen Qual', 'TotRms AbvGrd', 'Functional', 'Fireplaces', 'Fireplace Qu', 'Garage Type', 'Garage Yr Blt', 'Garage Finish', 'Garage Cars', 'Garage Area', 'Garage Qual', 'Garage Cond', 'Paved Drive', 'Wood Deck SF', 'Open Porch SF', 'Enclosed Porch', '3Ssn Porch', 'Screen Porch', 'Pool Area', 'Pool QC', 'Fence', 'Misc Feature', 'Misc Val', 'Mo Sold', 'Yr Sold', 'Sale Type', 'Sale Condition', 'SalePrice'] with the target variable being SalePrice having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/AmesHousing.csv_preprocessed.csv')
target_variable = 'SalePrice'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['Mo Sold','Misc Val','3Ssn Porch','Screen Porch','Pool QC','Fence','Misc Feature','Yr Sold',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Mo Sold','Misc Val','3Ssn Porch','Screen Porch','Pool QC','Fence','Misc Feature','Yr Sold',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named AmesHousing.csv having columns ['Order', 'PID', 'MS SubClass', 'MS Zoning', 'Lot Frontage', 'Lot Area', 'Street', 'Alley', 'Lot Shape', 'Land Contour', 'Utilities', 'Lot Config', 'Land Slope', 'Neighborhood', 'Condition 1', 'Condition 2', 'Bldg Type', 'House Style', 'Overall Qual', 'Overall Cond', 'Year Built', 'Year Remod/Add', 'Roof Style', 'Roof Matl', 'Exterior 1st', 'Exterior 2nd', 'Mas Vnr Type', 'Mas Vnr Area', 'Exter Qual', 'Exter Cond', 'Foundation', 'Bsmt Qual', 'Bsmt Cond', 'Bsmt Exposure', 'BsmtFin Type 1', 'BsmtFin SF 1', 'BsmtFin Type 2', 'BsmtFin SF 2', 'Bsmt Unf SF', 'Total Bsmt SF', 'Heating', 'Heating QC', 'Central Air', 'Electrical', '1st Flr SF', '2nd Flr SF', 'Low Qual Fin SF', 'Gr Liv Area', 'Bsmt Full Bath', 'Bsmt Half Bath', 'Full Bath', 'Half Bath', 'Bedroom AbvGr', 'Kitchen AbvGr', 'Kitchen Qual', 'TotRms AbvGrd', 'Functional', 'Fireplaces', 'Fireplace Qu', 'Garage Type', 'Garage Yr Blt', 'Garage Finish', 'Garage Cars', 'Garage Area', 'Garage Qual', 'Garage Cond', 'Paved Drive', 'Wood Deck SF', 'Open Porch SF', 'Enclosed Porch', '3Ssn Porch', 'Screen Porch', 'Pool Area', 'Pool QC', 'Fence', 'Misc Feature', 'Misc Val', 'Mo Sold', 'Yr Sold', 'Sale Type', 'Sale Condition', 'SalePrice'] with the target variable being SalePrice having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/AmesHousing.csv_preprocessed.csv')
target_variable = 'SalePrice'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['Mo Sold','Misc Val','3Ssn Porch','Screen Porch','Pool QC','Fence','Misc Feature','Yr Sold',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Mo Sold','Misc Val','3Ssn Porch','Screen Porch','Pool QC','Fence','Misc Feature','Yr Sold',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named AmesHousing.csv having columns ['Order', 'PID', 'MS SubClass', 'MS Zoning', 'Lot Frontage', 'Lot Area', 'Street', 'Alley', 'Lot Shape', 'Land Contour', 'Utilities', 'Lot Config', 'Land Slope', 'Neighborhood', 'Condition 1', 'Condition 2', 'Bldg Type', 'House Style', 'Overall Qual', 'Overall Cond', 'Year Built', 'Year Remod/Add', 'Roof Style', 'Roof Matl', 'Exterior 1st', 'Exterior 2nd', 'Mas Vnr Type', 'Mas Vnr Area', 'Exter Qual', 'Exter Cond', 'Foundation', 'Bsmt Qual', 'Bsmt Cond', 'Bsmt Exposure', 'BsmtFin Type 1', 'BsmtFin SF 1', 'BsmtFin Type 2', 'BsmtFin SF 2', 'Bsmt Unf SF', 'Total Bsmt SF', 'Heating', 'Heating QC', 'Central Air', 'Electrical', '1st Flr SF', '2nd Flr SF', 'Low Qual Fin SF', 'Gr Liv Area', 'Bsmt Full Bath', 'Bsmt Half Bath', 'Full Bath', 'Half Bath', 'Bedroom AbvGr', 'Kitchen AbvGr', 'Kitchen Qual', 'TotRms AbvGrd', 'Functional', 'Fireplaces', 'Fireplace Qu', 'Garage Type', 'Garage Yr Blt', 'Garage Finish', 'Garage Cars', 'Garage Area', 'Garage Qual', 'Garage Cond', 'Paved Drive', 'Wood Deck SF', 'Open Porch SF', 'Enclosed Porch', '3Ssn Porch', 'Screen Porch', 'Pool Area', 'Pool QC', 'Fence', 'Misc Feature', 'Misc Val', 'Mo Sold', 'Yr Sold', 'Sale Type', 'Sale Condition', 'SalePrice'] with the target variable being SalePrice having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/AmesHousing.csv_preprocessed.csv')
target_variable = 'SalePrice'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['Mo Sold','Misc Val','3Ssn Porch','Screen Porch','Pool QC','Fence','Misc Feature','Yr Sold',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Mo Sold','Misc Val','3Ssn Porch','Screen Porch','Pool QC','Fence','Misc Feature','Yr Sold',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named AmesHousing.csv having columns ['Order', 'PID', 'MS SubClass', 'MS Zoning', 'Lot Frontage', 'Lot Area', 'Street', 'Alley', 'Lot Shape', 'Land Contour', 'Utilities', 'Lot Config', 'Land Slope', 'Neighborhood', 'Condition 1', 'Condition 2', 'Bldg Type', 'House Style', 'Overall Qual', 'Overall Cond', 'Year Built', 'Year Remod/Add', 'Roof Style', 'Roof Matl', 'Exterior 1st', 'Exterior 2nd', 'Mas Vnr Type', 'Mas Vnr Area', 'Exter Qual', 'Exter Cond', 'Foundation', 'Bsmt Qual', 'Bsmt Cond', 'Bsmt Exposure', 'BsmtFin Type 1', 'BsmtFin SF 1', 'BsmtFin Type 2', 'BsmtFin SF 2', 'Bsmt Unf SF', 'Total Bsmt SF', 'Heating', 'Heating QC', 'Central Air', 'Electrical', '1st Flr SF', '2nd Flr SF', 'Low Qual Fin SF', 'Gr Liv Area', 'Bsmt Full Bath', 'Bsmt Half Bath', 'Full Bath', 'Half Bath', 'Bedroom AbvGr', 'Kitchen AbvGr', 'Kitchen Qual', 'TotRms AbvGrd', 'Functional', 'Fireplaces', 'Fireplace Qu', 'Garage Type', 'Garage Yr Blt', 'Garage Finish', 'Garage Cars', 'Garage Area', 'Garage Qual', 'Garage Cond', 'Paved Drive', 'Wood Deck SF', 'Open Porch SF', 'Enclosed Porch', '3Ssn Porch', 'Screen Porch', 'Pool Area', 'Pool QC', 'Fence', 'Misc Feature', 'Misc Val', 'Mo Sold', 'Yr Sold', 'Sale Type', 'Sale Condition', 'SalePrice'] with the target variable being SalePrice having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/AmesHousing.csv_preprocessed.csv')
target_variable = 'SalePrice'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['Mo Sold','Misc Val','3Ssn Porch','Screen Porch','Pool QC','Fence','Misc Feature','Yr Sold',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Mo Sold','Misc Val','3Ssn Porch','Screen Porch','Pool QC','Fence','Misc Feature','Yr Sold',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named Automobile.csv having columns ['name', 'mpg', 'cylinders', 'displacement', 'horsepower', 'weight', 'acceleration', 'model_year', 'origin'] with the target variable being mpg having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Automobile.csv_preprocessed.csv')
target_variable = 'mpg'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named Automobile.csv having columns ['name', 'mpg', 'cylinders', 'displacement', 'horsepower', 'weight', 'acceleration', 'model_year', 'origin'] with the target variable being mpg having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Automobile.csv_preprocessed.csv')
target_variable = 'mpg'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named Automobile.csv having columns ['name', 'mpg', 'cylinders', 'displacement', 'horsepower', 'weight', 'acceleration', 'model_year', 'origin'] with the target variable being mpg having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Automobile.csv_preprocessed.csv')
target_variable = 'mpg'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named Automobile.csv having columns ['name', 'mpg', 'cylinders', 'displacement', 'horsepower', 'weight', 'acceleration', 'model_year', 'origin'] with the target variable being mpg having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Automobile.csv_preprocessed.csv')
target_variable = 'mpg'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named Automobile.csv having columns ['name', 'mpg', 'cylinders', 'displacement', 'horsepower', 'weight', 'acceleration', 'model_year', 'origin'] with the target variable being mpg having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Automobile.csv_preprocessed.csv')
target_variable = 'mpg'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named Automobile.csv having columns ['name', 'mpg', 'cylinders', 'displacement', 'horsepower', 'weight', 'acceleration', 'model_year', 'origin'] with the target variable being mpg having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Automobile.csv_preprocessed.csv')
target_variable = 'mpg'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named Automobile.csv having columns ['name', 'mpg', 'cylinders', 'displacement', 'horsepower', 'weight', 'acceleration', 'model_year', 'origin'] with the target variable being mpg having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Automobile.csv_preprocessed.csv')
target_variable = 'mpg'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named Automobile.csv having columns ['name', 'mpg', 'cylinders', 'displacement', 'horsepower', 'weight', 'acceleration', 'model_year', 'origin'] with the target variable being mpg having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Automobile.csv_preprocessed.csv')
target_variable = 'mpg'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named Automobile.csv having columns ['name', 'mpg', 'cylinders', 'displacement', 'horsepower', 'weight', 'acceleration', 'model_year', 'origin'] with the target variable being mpg having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Automobile.csv_preprocessed.csv')
target_variable = 'mpg'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named Automobile.csv having columns ['name', 'mpg', 'cylinders', 'displacement', 'horsepower', 'weight', 'acceleration', 'model_year', 'origin'] with the target variable being mpg having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Automobile.csv_preprocessed.csv')
target_variable = 'mpg'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named Automobile.csv having columns ['name', 'mpg', 'cylinders', 'displacement', 'horsepower', 'weight', 'acceleration', 'model_year', 'origin'] with the target variable being mpg having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Automobile.csv_preprocessed.csv')
target_variable = 'mpg'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named Automobile.csv having columns ['name', 'mpg', 'cylinders', 'displacement', 'horsepower', 'weight', 'acceleration', 'model_year', 'origin'] with the target variable being mpg having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Automobile.csv_preprocessed.csv')
target_variable = 'mpg'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named Automobile.csv having columns ['name', 'mpg', 'cylinders', 'displacement', 'horsepower', 'weight', 'acceleration', 'model_year', 'origin'] with the target variable being acceleration having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Automobile.csv_preprocessed.csv')
target_variable = 'acceleration'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named Automobile.csv having columns ['name', 'mpg', 'cylinders', 'displacement', 'horsepower', 'weight', 'acceleration', 'model_year', 'origin'] with the target variable being acceleration having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Automobile.csv_preprocessed.csv')
target_variable = 'acceleration'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named Automobile.csv having columns ['name', 'mpg', 'cylinders', 'displacement', 'horsepower', 'weight', 'acceleration', 'model_year', 'origin'] with the target variable being acceleration having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Automobile.csv_preprocessed.csv')
target_variable = 'acceleration'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named Automobile.csv having columns ['name', 'mpg', 'cylinders', 'displacement', 'horsepower', 'weight', 'acceleration', 'model_year', 'origin'] with the target variable being acceleration having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Automobile.csv_preprocessed.csv')
target_variable = 'acceleration'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named Automobile.csv having columns ['name', 'mpg', 'cylinders', 'displacement', 'horsepower', 'weight', 'acceleration', 'model_year', 'origin'] with the target variable being acceleration having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Automobile.csv_preprocessed.csv')
target_variable = 'acceleration'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named Automobile.csv having columns ['name', 'mpg', 'cylinders', 'displacement', 'horsepower', 'weight', 'acceleration', 'model_year', 'origin'] with the target variable being acceleration having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Automobile.csv_preprocessed.csv')
target_variable = 'acceleration'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named Automobile.csv having columns ['name', 'mpg', 'cylinders', 'displacement', 'horsepower', 'weight', 'acceleration', 'model_year', 'origin'] with the target variable being acceleration having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Automobile.csv_preprocessed.csv')
target_variable = 'acceleration'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named Automobile.csv having columns ['name', 'mpg', 'cylinders', 'displacement', 'horsepower', 'weight', 'acceleration', 'model_year', 'origin'] with the target variable being acceleration having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Automobile.csv_preprocessed.csv')
target_variable = 'acceleration'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named Automobile.csv having columns ['name', 'mpg', 'cylinders', 'displacement', 'horsepower', 'weight', 'acceleration', 'model_year', 'origin'] with the target variable being acceleration having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Automobile.csv_preprocessed.csv')
target_variable = 'acceleration'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named Automobile.csv having columns ['name', 'mpg', 'cylinders', 'displacement', 'horsepower', 'weight', 'acceleration', 'model_year', 'origin'] with the target variable being acceleration having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Automobile.csv_preprocessed.csv')
target_variable = 'acceleration'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named Automobile.csv having columns ['name', 'mpg', 'cylinders', 'displacement', 'horsepower', 'weight', 'acceleration', 'model_year', 'origin'] with the target variable being acceleration having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Automobile.csv_preprocessed.csv')
target_variable = 'acceleration'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named Automobile.csv having columns ['name', 'mpg', 'cylinders', 'displacement', 'horsepower', 'weight', 'acceleration', 'model_year', 'origin'] with the target variable being acceleration having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Automobile.csv_preprocessed.csv')
target_variable = 'acceleration'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named CarPrice_Assignment.csv having columns ['car_ID', 'symboling', 'CarName', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/CarPrice_Assignment.csv_preprocessed.csv')
target_variable = 'price'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named CarPrice_Assignment.csv having columns ['car_ID', 'symboling', 'CarName', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/CarPrice_Assignment.csv_preprocessed.csv')
target_variable = 'price'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named CarPrice_Assignment.csv having columns ['car_ID', 'symboling', 'CarName', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/CarPrice_Assignment.csv_preprocessed.csv')
target_variable = 'price'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named CarPrice_Assignment.csv having columns ['car_ID', 'symboling', 'CarName', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/CarPrice_Assignment.csv_preprocessed.csv')
target_variable = 'price'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named CarPrice_Assignment.csv having columns ['car_ID', 'symboling', 'CarName', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/CarPrice_Assignment.csv_preprocessed.csv')
target_variable = 'price'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named CarPrice_Assignment.csv having columns ['car_ID', 'symboling', 'CarName', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/CarPrice_Assignment.csv_preprocessed.csv')
target_variable = 'price'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named CarPrice_Assignment.csv having columns ['car_ID', 'symboling', 'CarName', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/CarPrice_Assignment.csv_preprocessed.csv')
target_variable = 'price'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named CarPrice_Assignment.csv having columns ['car_ID', 'symboling', 'CarName', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/CarPrice_Assignment.csv_preprocessed.csv')
target_variable = 'price'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named CarPrice_Assignment.csv having columns ['car_ID', 'symboling', 'CarName', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/CarPrice_Assignment.csv_preprocessed.csv')
target_variable = 'price'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named CarPrice_Assignment.csv having columns ['car_ID', 'symboling', 'CarName', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/CarPrice_Assignment.csv_preprocessed.csv')
target_variable = 'price'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named CarPrice_Assignment.csv having columns ['car_ID', 'symboling', 'CarName', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/CarPrice_Assignment.csv_preprocessed.csv')
target_variable = 'price'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named CarPrice_Assignment.csv having columns ['car_ID', 'symboling', 'CarName', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/CarPrice_Assignment.csv_preprocessed.csv')
target_variable = 'price'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named CarPrice_Assignment.csv having columns ['car_ID', 'symboling', 'CarName', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price'] with the target variable being citympg having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/CarPrice_Assignment.csv_preprocessed.csv')
target_variable = 'citympg'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named CarPrice_Assignment.csv having columns ['car_ID', 'symboling', 'CarName', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price'] with the target variable being citympg having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/CarPrice_Assignment.csv_preprocessed.csv')
target_variable = 'citympg'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named CarPrice_Assignment.csv having columns ['car_ID', 'symboling', 'CarName', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price'] with the target variable being citympg having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/CarPrice_Assignment.csv_preprocessed.csv')
target_variable = 'citympg'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named CarPrice_Assignment.csv having columns ['car_ID', 'symboling', 'CarName', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price'] with the target variable being citympg having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/CarPrice_Assignment.csv_preprocessed.csv')
target_variable = 'citympg'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named CarPrice_Assignment.csv having columns ['car_ID', 'symboling', 'CarName', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price'] with the target variable being citympg having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/CarPrice_Assignment.csv_preprocessed.csv')
target_variable = 'citympg'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named CarPrice_Assignment.csv having columns ['car_ID', 'symboling', 'CarName', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price'] with the target variable being citympg having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/CarPrice_Assignment.csv_preprocessed.csv')
target_variable = 'citympg'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named CarPrice_Assignment.csv having columns ['car_ID', 'symboling', 'CarName', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price'] with the target variable being citympg having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/CarPrice_Assignment.csv_preprocessed.csv')
target_variable = 'citympg'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named CarPrice_Assignment.csv having columns ['car_ID', 'symboling', 'CarName', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price'] with the target variable being citympg having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/CarPrice_Assignment.csv_preprocessed.csv')
target_variable = 'citympg'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named CarPrice_Assignment.csv having columns ['car_ID', 'symboling', 'CarName', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price'] with the target variable being citympg having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/CarPrice_Assignment.csv_preprocessed.csv')
target_variable = 'citympg'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named CarPrice_Assignment.csv having columns ['car_ID', 'symboling', 'CarName', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price'] with the target variable being citympg having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/CarPrice_Assignment.csv_preprocessed.csv')
target_variable = 'citympg'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named CarPrice_Assignment.csv having columns ['car_ID', 'symboling', 'CarName', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price'] with the target variable being citympg having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/CarPrice_Assignment.csv_preprocessed.csv')
target_variable = 'citympg'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named CarPrice_Assignment.csv having columns ['car_ID', 'symboling', 'CarName', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price'] with the target variable being citympg having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/CarPrice_Assignment.csv_preprocessed.csv')
target_variable = 'citympg'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named CarPrice_Assignment.csv having columns ['car_ID', 'symboling', 'CarName', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price'] with the target variable being highwaympg having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/CarPrice_Assignment.csv_preprocessed.csv')
target_variable = 'highwaympg'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named CarPrice_Assignment.csv having columns ['car_ID', 'symboling', 'CarName', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price'] with the target variable being highwaympg having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/CarPrice_Assignment.csv_preprocessed.csv')
target_variable = 'highwaympg'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named CarPrice_Assignment.csv having columns ['car_ID', 'symboling', 'CarName', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price'] with the target variable being highwaympg having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/CarPrice_Assignment.csv_preprocessed.csv')
target_variable = 'highwaympg'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named CarPrice_Assignment.csv having columns ['car_ID', 'symboling', 'CarName', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price'] with the target variable being highwaympg having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/CarPrice_Assignment.csv_preprocessed.csv')
target_variable = 'highwaympg'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named CarPrice_Assignment.csv having columns ['car_ID', 'symboling', 'CarName', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price'] with the target variable being highwaympg having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/CarPrice_Assignment.csv_preprocessed.csv')
target_variable = 'highwaympg'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named CarPrice_Assignment.csv having columns ['car_ID', 'symboling', 'CarName', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price'] with the target variable being highwaympg having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/CarPrice_Assignment.csv_preprocessed.csv')
target_variable = 'highwaympg'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named CarPrice_Assignment.csv having columns ['car_ID', 'symboling', 'CarName', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price'] with the target variable being highwaympg having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/CarPrice_Assignment.csv_preprocessed.csv')
target_variable = 'highwaympg'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named CarPrice_Assignment.csv having columns ['car_ID', 'symboling', 'CarName', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price'] with the target variable being highwaympg having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/CarPrice_Assignment.csv_preprocessed.csv')
target_variable = 'highwaympg'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named CarPrice_Assignment.csv having columns ['car_ID', 'symboling', 'CarName', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price'] with the target variable being highwaympg having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/CarPrice_Assignment.csv_preprocessed.csv')
target_variable = 'highwaympg'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named CarPrice_Assignment.csv having columns ['car_ID', 'symboling', 'CarName', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price'] with the target variable being highwaympg having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/CarPrice_Assignment.csv_preprocessed.csv')
target_variable = 'highwaympg'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named CarPrice_Assignment.csv having columns ['car_ID', 'symboling', 'CarName', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price'] with the target variable being highwaympg having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/CarPrice_Assignment.csv_preprocessed.csv')
target_variable = 'highwaympg'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named CarPrice_Assignment.csv having columns ['car_ID', 'symboling', 'CarName', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price'] with the target variable being highwaympg having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/CarPrice_Assignment.csv_preprocessed.csv')
target_variable = 'highwaympg'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being close having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'close'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being close having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'close'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being close having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'close'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being close having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'close'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being close having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'close'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being close having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'close'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being close having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'close'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being close having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'close'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being close having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'close'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being close having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'close'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being close having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'close'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being close having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'close'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being high having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'high'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being high having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'high'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being high having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'high'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being high having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'high'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being high having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'high'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being high having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'high'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being high having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'high'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being high having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'high'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being high having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'high'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being high having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'high'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being high having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'high'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being high having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'high'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being low having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'low'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being low having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'low'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being low having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'low'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being low having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'low'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being low having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'low'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being low having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'low'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being low having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'low'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being low having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'low'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being low having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'low'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being low having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'low'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being low having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'low'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being low having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'low'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being open having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'open'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being open having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'open'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being open having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'open'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being open having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'open'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being open having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'open'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being open having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'open'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being open having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'open'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being open having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'open'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being open having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'open'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being open having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'open'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being open having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'open'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being open having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'open'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being volume having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'volume'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being volume having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'volume'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being volume having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'volume'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being volume having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'volume'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being volume having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'volume'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being volume having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'volume'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being volume having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'volume'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being volume having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'volume'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being volume having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'volume'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being volume having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'volume'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being volume having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'volume'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being volume having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'volume'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjClose having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjClose'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjClose having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjClose'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjClose having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjClose'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjClose having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjClose'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjClose having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjClose'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjClose having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjClose'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjClose having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjClose'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjClose having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjClose'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjClose having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjClose'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjClose having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjClose'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjClose having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjClose'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjClose having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjClose'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjHigh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjHigh'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjHigh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjHigh'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjHigh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjHigh'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjHigh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjHigh'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjHigh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjHigh'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjHigh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjHigh'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjHigh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjHigh'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjHigh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjHigh'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjHigh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjHigh'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjHigh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjHigh'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjHigh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjHigh'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjHigh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjHigh'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjLow having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjLow'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjLow having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjLow'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjLow having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjLow'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjLow having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjLow'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjLow having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjLow'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjLow having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjLow'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjLow having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjLow'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjLow having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjLow'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjLow having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjLow'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjLow having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjLow'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjLow having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjLow'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjLow having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjLow'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjOpen having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjOpen'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjOpen having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjOpen'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjOpen having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjOpen'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjOpen having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjOpen'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjOpen having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjOpen'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjOpen having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjOpen'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjOpen having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjOpen'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjOpen having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjOpen'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjOpen having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjOpen'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjOpen having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjOpen'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjOpen having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjOpen'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjOpen having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjOpen'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjVolume having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjVolume'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjVolume having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjVolume'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjVolume having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjVolume'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjVolume having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjVolume'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjVolume having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjVolume'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjVolume having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjVolume'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjVolume having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjVolume'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjVolume having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjVolume'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjVolume having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjVolume'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjVolume having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjVolume'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjVolume having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjVolume'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named GOOG.csv having columns ['symbol', 'date', 'close', 'high', 'low', 'open', 'volume', 'adjClose', 'adjHigh', 'adjLow', 'adjOpen', 'adjVolume', 'divCash', 'splitFactor'] with the target variable being adjVolume having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/GOOG.csv_preprocessed.csv')
target_variable = 'adjVolume'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['splitFactor',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being Salary having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'Salary'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being Salary having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'Salary'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being Salary having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'Salary'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being Salary having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'Salary'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being Salary having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'Salary'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being Salary having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'Salary'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being Salary having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'Salary'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being Salary having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'Salary'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being Salary having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'Salary'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being Salary having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'Salary'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being Salary having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'Salary'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being Salary having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'Salary'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being PerfScoreID having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'PerfScoreID'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being PerfScoreID having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'PerfScoreID'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being PerfScoreID having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'PerfScoreID'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being PerfScoreID having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'PerfScoreID'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being PerfScoreID having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'PerfScoreID'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being PerfScoreID having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'PerfScoreID'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being PerfScoreID having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'PerfScoreID'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being PerfScoreID having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'PerfScoreID'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being PerfScoreID having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'PerfScoreID'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being PerfScoreID having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'PerfScoreID'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being PerfScoreID having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'PerfScoreID'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being PerfScoreID having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'PerfScoreID'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being PerformanceScore having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'PerformanceScore'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being PerformanceScore having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'PerformanceScore'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being PerformanceScore having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'PerformanceScore'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being PerformanceScore having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'PerformanceScore'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being PerformanceScore having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'PerformanceScore'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being PerformanceScore having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'PerformanceScore'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being PerformanceScore having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'PerformanceScore'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being PerformanceScore having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'PerformanceScore'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being PerformanceScore having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'PerformanceScore'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being PerformanceScore having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'PerformanceScore'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being PerformanceScore having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'PerformanceScore'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being PerformanceScore having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'PerformanceScore'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being EmpSatisfaction having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'EmpSatisfaction'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being EmpSatisfaction having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'EmpSatisfaction'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being EmpSatisfaction having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'EmpSatisfaction'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being EmpSatisfaction having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'EmpSatisfaction'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being EmpSatisfaction having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'EmpSatisfaction'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being EmpSatisfaction having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'EmpSatisfaction'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being EmpSatisfaction having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'EmpSatisfaction'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being EmpSatisfaction having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'EmpSatisfaction'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being EmpSatisfaction having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'EmpSatisfaction'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being EmpSatisfaction having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'EmpSatisfaction'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being EmpSatisfaction having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'EmpSatisfaction'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named HRDataset_v14.csv having columns ['Employee_Name', 'EmpID', 'MarriedID', 'MaritalStatusID', 'GenderID', 'EmpStatusID', 'DeptID', 'PerfScoreID', 'FromDiversityJobFairID', 'Salary', 'Termd', 'PositionID', 'Position', 'State', 'Zip', 'DOB', 'Sex', 'MaritalDesc', 'CitizenDesc', 'HispanicLatino', 'RaceDesc', 'DateofHire', 'DateofTermination', 'TermReason', 'EmploymentStatus', 'Department', 'ManagerName', 'ManagerID', 'RecruitmentSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'LastPerformanceReview_Date', 'DaysLateLast30', 'Absences'] with the target variable being EmpSatisfaction having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/HRDataset_v14.csv_preprocessed.csv')
target_variable = 'EmpSatisfaction'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Termd','DOB','DateofHire','DateofTermination','LastPerformanceReview_Date','DaysLateLast30','Absences',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being squareMeters having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'squareMeters'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being squareMeters having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'squareMeters'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being squareMeters having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'squareMeters'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being squareMeters having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'squareMeters'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being squareMeters having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'squareMeters'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being squareMeters having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'squareMeters'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being squareMeters having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'squareMeters'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being squareMeters having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'squareMeters'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being squareMeters having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'squareMeters'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being squareMeters having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'squareMeters'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being squareMeters having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'squareMeters'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being squareMeters having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'squareMeters'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being numberOfRooms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'numberOfRooms'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being numberOfRooms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'numberOfRooms'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being numberOfRooms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'numberOfRooms'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being numberOfRooms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'numberOfRooms'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being numberOfRooms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'numberOfRooms'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being numberOfRooms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'numberOfRooms'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being numberOfRooms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'numberOfRooms'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being numberOfRooms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'numberOfRooms'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being numberOfRooms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'numberOfRooms'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being numberOfRooms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'numberOfRooms'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being numberOfRooms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'numberOfRooms'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being numberOfRooms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'numberOfRooms'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being floors having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'floors'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being floors having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'floors'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being floors having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'floors'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being floors having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'floors'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being floors having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'floors'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being floors having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'floors'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being floors having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'floors'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being floors having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'floors'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being floors having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'floors'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being floors having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'floors'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being floors having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'floors'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being floors having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'floors'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'price'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'price'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'price'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'price'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'price'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'price'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'price'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'price'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'price'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'price'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'price'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named ParisHousing.csv having columns ['squareMeters', 'numberOfRooms', 'hasYard', 'hasPool', 'floors', 'cityCode', 'cityPartRange', 'numPrevOwners', 'made', 'isNewBuilt', 'hasStormProtector', 'basement', 'attic', 'garage', 'hasStorageRoom', 'hasGuestRoom', 'price'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/ParisHousing.csv_preprocessed.csv')
target_variable = 'price'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['made','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named SAT__College_Board__2010_School_Level_Results_20240506.csv having columns ['DBN', 'School Name', 'Number of Test Takers', 'Critical Reading Mean', 'Mathematics Mean', 'Writing Mean'] with the target variable being Critical Reading Mean having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/SAT__College_Board__2010_School_Level_Results_20240506.csv_preprocessed.csv')
target_variable = 'Critical Reading Mean'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named SAT__College_Board__2010_School_Level_Results_20240506.csv having columns ['DBN', 'School Name', 'Number of Test Takers', 'Critical Reading Mean', 'Mathematics Mean', 'Writing Mean'] with the target variable being Critical Reading Mean having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/SAT__College_Board__2010_School_Level_Results_20240506.csv_preprocessed.csv')
target_variable = 'Critical Reading Mean'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named SAT__College_Board__2010_School_Level_Results_20240506.csv having columns ['DBN', 'School Name', 'Number of Test Takers', 'Critical Reading Mean', 'Mathematics Mean', 'Writing Mean'] with the target variable being Critical Reading Mean having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/SAT__College_Board__2010_School_Level_Results_20240506.csv_preprocessed.csv')
target_variable = 'Critical Reading Mean'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named SAT__College_Board__2010_School_Level_Results_20240506.csv having columns ['DBN', 'School Name', 'Number of Test Takers', 'Critical Reading Mean', 'Mathematics Mean', 'Writing Mean'] with the target variable being Critical Reading Mean having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/SAT__College_Board__2010_School_Level_Results_20240506.csv_preprocessed.csv')
target_variable = 'Critical Reading Mean'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named SAT__College_Board__2010_School_Level_Results_20240506.csv having columns ['DBN', 'School Name', 'Number of Test Takers', 'Critical Reading Mean', 'Mathematics Mean', 'Writing Mean'] with the target variable being Critical Reading Mean having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/SAT__College_Board__2010_School_Level_Results_20240506.csv_preprocessed.csv')
target_variable = 'Critical Reading Mean'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named SAT__College_Board__2010_School_Level_Results_20240506.csv having columns ['DBN', 'School Name', 'Number of Test Takers', 'Critical Reading Mean', 'Mathematics Mean', 'Writing Mean'] with the target variable being Critical Reading Mean having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/SAT__College_Board__2010_School_Level_Results_20240506.csv_preprocessed.csv')
target_variable = 'Critical Reading Mean'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named SAT__College_Board__2010_School_Level_Results_20240506.csv having columns ['DBN', 'School Name', 'Number of Test Takers', 'Critical Reading Mean', 'Mathematics Mean', 'Writing Mean'] with the target variable being Critical Reading Mean having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/SAT__College_Board__2010_School_Level_Results_20240506.csv_preprocessed.csv')
target_variable = 'Critical Reading Mean'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named SAT__College_Board__2010_School_Level_Results_20240506.csv having columns ['DBN', 'School Name', 'Number of Test Takers', 'Critical Reading Mean', 'Mathematics Mean', 'Writing Mean'] with the target variable being Critical Reading Mean having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/SAT__College_Board__2010_School_Level_Results_20240506.csv_preprocessed.csv')
target_variable = 'Critical Reading Mean'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named SAT__College_Board__2010_School_Level_Results_20240506.csv having columns ['DBN', 'School Name', 'Number of Test Takers', 'Critical Reading Mean', 'Mathematics Mean', 'Writing Mean'] with the target variable being Critical Reading Mean having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/SAT__College_Board__2010_School_Level_Results_20240506.csv_preprocessed.csv')
target_variable = 'Critical Reading Mean'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named SAT__College_Board__2010_School_Level_Results_20240506.csv having columns ['DBN', 'School Name', 'Number of Test Takers', 'Critical Reading Mean', 'Mathematics Mean', 'Writing Mean'] with the target variable being Critical Reading Mean having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/SAT__College_Board__2010_School_Level_Results_20240506.csv_preprocessed.csv')
target_variable = 'Critical Reading Mean'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named SAT__College_Board__2010_School_Level_Results_20240506.csv having columns ['DBN', 'School Name', 'Number of Test Takers', 'Critical Reading Mean', 'Mathematics Mean', 'Writing Mean'] with the target variable being Critical Reading Mean having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/SAT__College_Board__2010_School_Level_Results_20240506.csv_preprocessed.csv')
target_variable = 'Critical Reading Mean'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named SAT__College_Board__2010_School_Level_Results_20240506.csv having columns ['DBN', 'School Name', 'Number of Test Takers', 'Critical Reading Mean', 'Mathematics Mean', 'Writing Mean'] with the target variable being Critical Reading Mean having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/SAT__College_Board__2010_School_Level_Results_20240506.csv_preprocessed.csv')
target_variable = 'Critical Reading Mean'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named SAT__College_Board__2010_School_Level_Results_20240506.csv having columns ['DBN', 'School Name', 'Number of Test Takers', 'Critical Reading Mean', 'Mathematics Mean', 'Writing Mean'] with the target variable being Mathematics Mean having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/SAT__College_Board__2010_School_Level_Results_20240506.csv_preprocessed.csv')
target_variable = 'Mathematics Mean'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named SAT__College_Board__2010_School_Level_Results_20240506.csv having columns ['DBN', 'School Name', 'Number of Test Takers', 'Critical Reading Mean', 'Mathematics Mean', 'Writing Mean'] with the target variable being Mathematics Mean having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/SAT__College_Board__2010_School_Level_Results_20240506.csv_preprocessed.csv')
target_variable = 'Mathematics Mean'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named SAT__College_Board__2010_School_Level_Results_20240506.csv having columns ['DBN', 'School Name', 'Number of Test Takers', 'Critical Reading Mean', 'Mathematics Mean', 'Writing Mean'] with the target variable being Mathematics Mean having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/SAT__College_Board__2010_School_Level_Results_20240506.csv_preprocessed.csv')
target_variable = 'Mathematics Mean'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named SAT__College_Board__2010_School_Level_Results_20240506.csv having columns ['DBN', 'School Name', 'Number of Test Takers', 'Critical Reading Mean', 'Mathematics Mean', 'Writing Mean'] with the target variable being Mathematics Mean having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/SAT__College_Board__2010_School_Level_Results_20240506.csv_preprocessed.csv')
target_variable = 'Mathematics Mean'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named SAT__College_Board__2010_School_Level_Results_20240506.csv having columns ['DBN', 'School Name', 'Number of Test Takers', 'Critical Reading Mean', 'Mathematics Mean', 'Writing Mean'] with the target variable being Mathematics Mean having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/SAT__College_Board__2010_School_Level_Results_20240506.csv_preprocessed.csv')
target_variable = 'Mathematics Mean'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named SAT__College_Board__2010_School_Level_Results_20240506.csv having columns ['DBN', 'School Name', 'Number of Test Takers', 'Critical Reading Mean', 'Mathematics Mean', 'Writing Mean'] with the target variable being Mathematics Mean having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/SAT__College_Board__2010_School_Level_Results_20240506.csv_preprocessed.csv')
target_variable = 'Mathematics Mean'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named SAT__College_Board__2010_School_Level_Results_20240506.csv having columns ['DBN', 'School Name', 'Number of Test Takers', 'Critical Reading Mean', 'Mathematics Mean', 'Writing Mean'] with the target variable being Mathematics Mean having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/SAT__College_Board__2010_School_Level_Results_20240506.csv_preprocessed.csv')
target_variable = 'Mathematics Mean'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named SAT__College_Board__2010_School_Level_Results_20240506.csv having columns ['DBN', 'School Name', 'Number of Test Takers', 'Critical Reading Mean', 'Mathematics Mean', 'Writing Mean'] with the target variable being Mathematics Mean having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/SAT__College_Board__2010_School_Level_Results_20240506.csv_preprocessed.csv')
target_variable = 'Mathematics Mean'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named SAT__College_Board__2010_School_Level_Results_20240506.csv having columns ['DBN', 'School Name', 'Number of Test Takers', 'Critical Reading Mean', 'Mathematics Mean', 'Writing Mean'] with the target variable being Mathematics Mean having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/SAT__College_Board__2010_School_Level_Results_20240506.csv_preprocessed.csv')
target_variable = 'Mathematics Mean'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named SAT__College_Board__2010_School_Level_Results_20240506.csv having columns ['DBN', 'School Name', 'Number of Test Takers', 'Critical Reading Mean', 'Mathematics Mean', 'Writing Mean'] with the target variable being Mathematics Mean having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/SAT__College_Board__2010_School_Level_Results_20240506.csv_preprocessed.csv')
target_variable = 'Mathematics Mean'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named SAT__College_Board__2010_School_Level_Results_20240506.csv having columns ['DBN', 'School Name', 'Number of Test Takers', 'Critical Reading Mean', 'Mathematics Mean', 'Writing Mean'] with the target variable being Mathematics Mean having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/SAT__College_Board__2010_School_Level_Results_20240506.csv_preprocessed.csv')
target_variable = 'Mathematics Mean'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named SAT__College_Board__2010_School_Level_Results_20240506.csv having columns ['DBN', 'School Name', 'Number of Test Takers', 'Critical Reading Mean', 'Mathematics Mean', 'Writing Mean'] with the target variable being Mathematics Mean having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/SAT__College_Board__2010_School_Level_Results_20240506.csv_preprocessed.csv')
target_variable = 'Mathematics Mean'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named SAT__College_Board__2010_School_Level_Results_20240506.csv having columns ['DBN', 'School Name', 'Number of Test Takers', 'Critical Reading Mean', 'Mathematics Mean', 'Writing Mean'] with the target variable being Writing Mean having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/SAT__College_Board__2010_School_Level_Results_20240506.csv_preprocessed.csv')
target_variable = 'Writing Mean'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named SAT__College_Board__2010_School_Level_Results_20240506.csv having columns ['DBN', 'School Name', 'Number of Test Takers', 'Critical Reading Mean', 'Mathematics Mean', 'Writing Mean'] with the target variable being Writing Mean having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/SAT__College_Board__2010_School_Level_Results_20240506.csv_preprocessed.csv')
target_variable = 'Writing Mean'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named SAT__College_Board__2010_School_Level_Results_20240506.csv having columns ['DBN', 'School Name', 'Number of Test Takers', 'Critical Reading Mean', 'Mathematics Mean', 'Writing Mean'] with the target variable being Writing Mean having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/SAT__College_Board__2010_School_Level_Results_20240506.csv_preprocessed.csv')
target_variable = 'Writing Mean'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named SAT__College_Board__2010_School_Level_Results_20240506.csv having columns ['DBN', 'School Name', 'Number of Test Takers', 'Critical Reading Mean', 'Mathematics Mean', 'Writing Mean'] with the target variable being Writing Mean having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/SAT__College_Board__2010_School_Level_Results_20240506.csv_preprocessed.csv')
target_variable = 'Writing Mean'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named SAT__College_Board__2010_School_Level_Results_20240506.csv having columns ['DBN', 'School Name', 'Number of Test Takers', 'Critical Reading Mean', 'Mathematics Mean', 'Writing Mean'] with the target variable being Writing Mean having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/SAT__College_Board__2010_School_Level_Results_20240506.csv_preprocessed.csv')
target_variable = 'Writing Mean'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named SAT__College_Board__2010_School_Level_Results_20240506.csv having columns ['DBN', 'School Name', 'Number of Test Takers', 'Critical Reading Mean', 'Mathematics Mean', 'Writing Mean'] with the target variable being Writing Mean having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/SAT__College_Board__2010_School_Level_Results_20240506.csv_preprocessed.csv')
target_variable = 'Writing Mean'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named SAT__College_Board__2010_School_Level_Results_20240506.csv having columns ['DBN', 'School Name', 'Number of Test Takers', 'Critical Reading Mean', 'Mathematics Mean', 'Writing Mean'] with the target variable being Writing Mean having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/SAT__College_Board__2010_School_Level_Results_20240506.csv_preprocessed.csv')
target_variable = 'Writing Mean'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named SAT__College_Board__2010_School_Level_Results_20240506.csv having columns ['DBN', 'School Name', 'Number of Test Takers', 'Critical Reading Mean', 'Mathematics Mean', 'Writing Mean'] with the target variable being Writing Mean having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/SAT__College_Board__2010_School_Level_Results_20240506.csv_preprocessed.csv')
target_variable = 'Writing Mean'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named SAT__College_Board__2010_School_Level_Results_20240506.csv having columns ['DBN', 'School Name', 'Number of Test Takers', 'Critical Reading Mean', 'Mathematics Mean', 'Writing Mean'] with the target variable being Writing Mean having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/SAT__College_Board__2010_School_Level_Results_20240506.csv_preprocessed.csv')
target_variable = 'Writing Mean'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named SAT__College_Board__2010_School_Level_Results_20240506.csv having columns ['DBN', 'School Name', 'Number of Test Takers', 'Critical Reading Mean', 'Mathematics Mean', 'Writing Mean'] with the target variable being Writing Mean having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/SAT__College_Board__2010_School_Level_Results_20240506.csv_preprocessed.csv')
target_variable = 'Writing Mean'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named SAT__College_Board__2010_School_Level_Results_20240506.csv having columns ['DBN', 'School Name', 'Number of Test Takers', 'Critical Reading Mean', 'Mathematics Mean', 'Writing Mean'] with the target variable being Writing Mean having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/SAT__College_Board__2010_School_Level_Results_20240506.csv_preprocessed.csv')
target_variable = 'Writing Mean'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named SAT__College_Board__2010_School_Level_Results_20240506.csv having columns ['DBN', 'School Name', 'Number of Test Takers', 'Critical Reading Mean', 'Mathematics Mean', 'Writing Mean'] with the target variable being Writing Mean having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/SAT__College_Board__2010_School_Level_Results_20240506.csv_preprocessed.csv')
target_variable = 'Writing Mean'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named Salary_dataset.csv having columns ['Unnamed: 0', 'YearsExperience', 'Salary'] with the target variable being Salary having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Salary_dataset.csv_preprocessed.csv')
target_variable = 'Salary'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named Salary_dataset.csv having columns ['Unnamed: 0', 'YearsExperience', 'Salary'] with the target variable being Salary having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Salary_dataset.csv_preprocessed.csv')
target_variable = 'Salary'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named Salary_dataset.csv having columns ['Unnamed: 0', 'YearsExperience', 'Salary'] with the target variable being Salary having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Salary_dataset.csv_preprocessed.csv')
target_variable = 'Salary'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named Salary_dataset.csv having columns ['Unnamed: 0', 'YearsExperience', 'Salary'] with the target variable being Salary having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Salary_dataset.csv_preprocessed.csv')
target_variable = 'Salary'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named Salary_dataset.csv having columns ['Unnamed: 0', 'YearsExperience', 'Salary'] with the target variable being Salary having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Salary_dataset.csv_preprocessed.csv')
target_variable = 'Salary'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named Salary_dataset.csv having columns ['Unnamed: 0', 'YearsExperience', 'Salary'] with the target variable being Salary having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Salary_dataset.csv_preprocessed.csv')
target_variable = 'Salary'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named Salary_dataset.csv having columns ['Unnamed: 0', 'YearsExperience', 'Salary'] with the target variable being Salary having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Salary_dataset.csv_preprocessed.csv')
target_variable = 'Salary'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named Salary_dataset.csv having columns ['Unnamed: 0', 'YearsExperience', 'Salary'] with the target variable being Salary having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Salary_dataset.csv_preprocessed.csv')
target_variable = 'Salary'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named Salary_dataset.csv having columns ['Unnamed: 0', 'YearsExperience', 'Salary'] with the target variable being Salary having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Salary_dataset.csv_preprocessed.csv')
target_variable = 'Salary'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named Salary_dataset.csv having columns ['Unnamed: 0', 'YearsExperience', 'Salary'] with the target variable being Salary having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Salary_dataset.csv_preprocessed.csv')
target_variable = 'Salary'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named Salary_dataset.csv having columns ['Unnamed: 0', 'YearsExperience', 'Salary'] with the target variable being Salary having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Salary_dataset.csv_preprocessed.csv')
target_variable = 'Salary'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named Salary_dataset.csv having columns ['Unnamed: 0', 'YearsExperience', 'Salary'] with the target variable being Salary having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Salary_dataset.csv_preprocessed.csv')
target_variable = 'Salary'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being Usage_kWh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'Usage_kWh'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being Usage_kWh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'Usage_kWh'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being Usage_kWh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'Usage_kWh'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being Usage_kWh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'Usage_kWh'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being Usage_kWh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'Usage_kWh'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being Usage_kWh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'Usage_kWh'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being Usage_kWh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'Usage_kWh'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being Usage_kWh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'Usage_kWh'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being Usage_kWh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'Usage_kWh'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being Usage_kWh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'Usage_kWh'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being Usage_kWh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'Usage_kWh'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being Usage_kWh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'Usage_kWh'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being Lagging_Current_Reactive.Power_kVarh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'Lagging_Current_Reactive.Power_kVarh'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being Lagging_Current_Reactive.Power_kVarh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'Lagging_Current_Reactive.Power_kVarh'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being Lagging_Current_Reactive.Power_kVarh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'Lagging_Current_Reactive.Power_kVarh'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being Lagging_Current_Reactive.Power_kVarh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'Lagging_Current_Reactive.Power_kVarh'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being Lagging_Current_Reactive.Power_kVarh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'Lagging_Current_Reactive.Power_kVarh'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being Lagging_Current_Reactive.Power_kVarh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'Lagging_Current_Reactive.Power_kVarh'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being Lagging_Current_Reactive.Power_kVarh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'Lagging_Current_Reactive.Power_kVarh'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being Lagging_Current_Reactive.Power_kVarh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'Lagging_Current_Reactive.Power_kVarh'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being Lagging_Current_Reactive.Power_kVarh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'Lagging_Current_Reactive.Power_kVarh'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being Lagging_Current_Reactive.Power_kVarh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'Lagging_Current_Reactive.Power_kVarh'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being Lagging_Current_Reactive.Power_kVarh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'Lagging_Current_Reactive.Power_kVarh'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being Lagging_Current_Reactive.Power_kVarh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'Lagging_Current_Reactive.Power_kVarh'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being Leading_Current_Reactive_Power_kVarh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'Leading_Current_Reactive_Power_kVarh'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being Leading_Current_Reactive_Power_kVarh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'Leading_Current_Reactive_Power_kVarh'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being Leading_Current_Reactive_Power_kVarh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'Leading_Current_Reactive_Power_kVarh'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being Leading_Current_Reactive_Power_kVarh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'Leading_Current_Reactive_Power_kVarh'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being Leading_Current_Reactive_Power_kVarh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'Leading_Current_Reactive_Power_kVarh'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being Leading_Current_Reactive_Power_kVarh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'Leading_Current_Reactive_Power_kVarh'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being Leading_Current_Reactive_Power_kVarh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'Leading_Current_Reactive_Power_kVarh'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being Leading_Current_Reactive_Power_kVarh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'Leading_Current_Reactive_Power_kVarh'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being Leading_Current_Reactive_Power_kVarh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'Leading_Current_Reactive_Power_kVarh'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being Leading_Current_Reactive_Power_kVarh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'Leading_Current_Reactive_Power_kVarh'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being Leading_Current_Reactive_Power_kVarh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'Leading_Current_Reactive_Power_kVarh'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being Leading_Current_Reactive_Power_kVarh having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'Leading_Current_Reactive_Power_kVarh'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being CO2(tCO2) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'CO2(tCO2)'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being CO2(tCO2) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'CO2(tCO2)'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being CO2(tCO2) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'CO2(tCO2)'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being CO2(tCO2) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'CO2(tCO2)'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being CO2(tCO2) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'CO2(tCO2)'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being CO2(tCO2) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'CO2(tCO2)'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being CO2(tCO2) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'CO2(tCO2)'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being CO2(tCO2) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'CO2(tCO2)'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being CO2(tCO2) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'CO2(tCO2)'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being CO2(tCO2) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'CO2(tCO2)'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being CO2(tCO2) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'CO2(tCO2)'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named Steel_industry_data.csv having columns ['date', 'Usage_kWh', 'Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)', 'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM', 'WeekStatus', 'Day_of_week', 'Load_Type'] with the target variable being CO2(tCO2) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Steel_industry_data.csv_preprocessed.csv')
target_variable = 'CO2(tCO2)'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named Student_Performance.csv having columns ['Hours Studied', 'Previous Scores', 'Extracurricular Activities', 'Sleep Hours', 'Sample Question Papers Practiced', 'Performance Index'] with the target variable being Performance Index having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Student_Performance.csv_preprocessed.csv')
target_variable = 'Performance Index'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named Student_Performance.csv having columns ['Hours Studied', 'Previous Scores', 'Extracurricular Activities', 'Sleep Hours', 'Sample Question Papers Practiced', 'Performance Index'] with the target variable being Performance Index having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Student_Performance.csv_preprocessed.csv')
target_variable = 'Performance Index'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named Student_Performance.csv having columns ['Hours Studied', 'Previous Scores', 'Extracurricular Activities', 'Sleep Hours', 'Sample Question Papers Practiced', 'Performance Index'] with the target variable being Performance Index having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Student_Performance.csv_preprocessed.csv')
target_variable = 'Performance Index'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named Student_Performance.csv having columns ['Hours Studied', 'Previous Scores', 'Extracurricular Activities', 'Sleep Hours', 'Sample Question Papers Practiced', 'Performance Index'] with the target variable being Performance Index having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Student_Performance.csv_preprocessed.csv')
target_variable = 'Performance Index'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named Student_Performance.csv having columns ['Hours Studied', 'Previous Scores', 'Extracurricular Activities', 'Sleep Hours', 'Sample Question Papers Practiced', 'Performance Index'] with the target variable being Performance Index having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Student_Performance.csv_preprocessed.csv')
target_variable = 'Performance Index'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named Student_Performance.csv having columns ['Hours Studied', 'Previous Scores', 'Extracurricular Activities', 'Sleep Hours', 'Sample Question Papers Practiced', 'Performance Index'] with the target variable being Performance Index having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Student_Performance.csv_preprocessed.csv')
target_variable = 'Performance Index'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named Student_Performance.csv having columns ['Hours Studied', 'Previous Scores', 'Extracurricular Activities', 'Sleep Hours', 'Sample Question Papers Practiced', 'Performance Index'] with the target variable being Performance Index having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Student_Performance.csv_preprocessed.csv')
target_variable = 'Performance Index'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named Student_Performance.csv having columns ['Hours Studied', 'Previous Scores', 'Extracurricular Activities', 'Sleep Hours', 'Sample Question Papers Practiced', 'Performance Index'] with the target variable being Performance Index having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Student_Performance.csv_preprocessed.csv')
target_variable = 'Performance Index'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named Student_Performance.csv having columns ['Hours Studied', 'Previous Scores', 'Extracurricular Activities', 'Sleep Hours', 'Sample Question Papers Practiced', 'Performance Index'] with the target variable being Performance Index having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Student_Performance.csv_preprocessed.csv')
target_variable = 'Performance Index'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named Student_Performance.csv having columns ['Hours Studied', 'Previous Scores', 'Extracurricular Activities', 'Sleep Hours', 'Sample Question Papers Practiced', 'Performance Index'] with the target variable being Performance Index having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Student_Performance.csv_preprocessed.csv')
target_variable = 'Performance Index'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named Student_Performance.csv having columns ['Hours Studied', 'Previous Scores', 'Extracurricular Activities', 'Sleep Hours', 'Sample Question Papers Practiced', 'Performance Index'] with the target variable being Performance Index having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Student_Performance.csv_preprocessed.csv')
target_variable = 'Performance Index'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named Student_Performance.csv having columns ['Hours Studied', 'Previous Scores', 'Extracurricular Activities', 'Sleep Hours', 'Sample Question Papers Practiced', 'Performance Index'] with the target variable being Performance Index having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Student_Performance.csv_preprocessed.csv')
target_variable = 'Performance Index'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named Walmart.csv having columns ['Store', 'Date', 'Weekly_Sales', 'Holiday_Flag', 'Temperature', 'Fuel_Price', 'CPI', 'Unemployment'] with the target variable being Weekly_Sales having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Walmart.csv_preprocessed.csv')
target_variable = 'Weekly_Sales'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named Walmart.csv having columns ['Store', 'Date', 'Weekly_Sales', 'Holiday_Flag', 'Temperature', 'Fuel_Price', 'CPI', 'Unemployment'] with the target variable being Weekly_Sales having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Walmart.csv_preprocessed.csv')
target_variable = 'Weekly_Sales'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named Walmart.csv having columns ['Store', 'Date', 'Weekly_Sales', 'Holiday_Flag', 'Temperature', 'Fuel_Price', 'CPI', 'Unemployment'] with the target variable being Weekly_Sales having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Walmart.csv_preprocessed.csv')
target_variable = 'Weekly_Sales'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named Walmart.csv having columns ['Store', 'Date', 'Weekly_Sales', 'Holiday_Flag', 'Temperature', 'Fuel_Price', 'CPI', 'Unemployment'] with the target variable being Weekly_Sales having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Walmart.csv_preprocessed.csv')
target_variable = 'Weekly_Sales'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named Walmart.csv having columns ['Store', 'Date', 'Weekly_Sales', 'Holiday_Flag', 'Temperature', 'Fuel_Price', 'CPI', 'Unemployment'] with the target variable being Weekly_Sales having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Walmart.csv_preprocessed.csv')
target_variable = 'Weekly_Sales'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named Walmart.csv having columns ['Store', 'Date', 'Weekly_Sales', 'Holiday_Flag', 'Temperature', 'Fuel_Price', 'CPI', 'Unemployment'] with the target variable being Weekly_Sales having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Walmart.csv_preprocessed.csv')
target_variable = 'Weekly_Sales'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named Walmart.csv having columns ['Store', 'Date', 'Weekly_Sales', 'Holiday_Flag', 'Temperature', 'Fuel_Price', 'CPI', 'Unemployment'] with the target variable being Weekly_Sales having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Walmart.csv_preprocessed.csv')
target_variable = 'Weekly_Sales'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named Walmart.csv having columns ['Store', 'Date', 'Weekly_Sales', 'Holiday_Flag', 'Temperature', 'Fuel_Price', 'CPI', 'Unemployment'] with the target variable being Weekly_Sales having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Walmart.csv_preprocessed.csv')
target_variable = 'Weekly_Sales'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named Walmart.csv having columns ['Store', 'Date', 'Weekly_Sales', 'Holiday_Flag', 'Temperature', 'Fuel_Price', 'CPI', 'Unemployment'] with the target variable being Weekly_Sales having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Walmart.csv_preprocessed.csv')
target_variable = 'Weekly_Sales'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named Walmart.csv having columns ['Store', 'Date', 'Weekly_Sales', 'Holiday_Flag', 'Temperature', 'Fuel_Price', 'CPI', 'Unemployment'] with the target variable being Weekly_Sales having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Walmart.csv_preprocessed.csv')
target_variable = 'Weekly_Sales'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named Walmart.csv having columns ['Store', 'Date', 'Weekly_Sales', 'Holiday_Flag', 'Temperature', 'Fuel_Price', 'CPI', 'Unemployment'] with the target variable being Weekly_Sales having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Walmart.csv_preprocessed.csv')
target_variable = 'Weekly_Sales'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named Walmart.csv having columns ['Store', 'Date', 'Weekly_Sales', 'Holiday_Flag', 'Temperature', 'Fuel_Price', 'CPI', 'Unemployment'] with the target variable being Weekly_Sales having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/Walmart.csv_preprocessed.csv')
target_variable = 'Weekly_Sales'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named air-passengers-carried new.csv having columns ['Entity', 'Code', 'Year', 'Air transport, passengers carried'] with the target variable being Air transport having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/air-passengers-carried new.csv_preprocessed.csv')
target_variable = 'Air transport'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named air-passengers-carried new.csv having columns ['Entity', 'Code', 'Year', 'Air transport, passengers carried'] with the target variable being Air transport having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/air-passengers-carried new.csv_preprocessed.csv')
target_variable = 'Air transport'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named air-passengers-carried new.csv having columns ['Entity', 'Code', 'Year', 'Air transport, passengers carried'] with the target variable being Air transport having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/air-passengers-carried new.csv_preprocessed.csv')
target_variable = 'Air transport'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named air-passengers-carried new.csv having columns ['Entity', 'Code', 'Year', 'Air transport, passengers carried'] with the target variable being Air transport having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/air-passengers-carried new.csv_preprocessed.csv')
target_variable = 'Air transport'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named air-passengers-carried new.csv having columns ['Entity', 'Code', 'Year', 'Air transport, passengers carried'] with the target variable being Air transport having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/air-passengers-carried new.csv_preprocessed.csv')
target_variable = 'Air transport'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named air-passengers-carried new.csv having columns ['Entity', 'Code', 'Year', 'Air transport, passengers carried'] with the target variable being Air transport having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/air-passengers-carried new.csv_preprocessed.csv')
target_variable = 'Air transport'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named air-passengers-carried new.csv having columns ['Entity', 'Code', 'Year', 'Air transport, passengers carried'] with the target variable being Air transport having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/air-passengers-carried new.csv_preprocessed.csv')
target_variable = 'Air transport'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named air-passengers-carried new.csv having columns ['Entity', 'Code', 'Year', 'Air transport, passengers carried'] with the target variable being Air transport having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/air-passengers-carried new.csv_preprocessed.csv')
target_variable = 'Air transport'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named air-passengers-carried new.csv having columns ['Entity', 'Code', 'Year', 'Air transport, passengers carried'] with the target variable being Air transport having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/air-passengers-carried new.csv_preprocessed.csv')
target_variable = 'Air transport'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named air-passengers-carried new.csv having columns ['Entity', 'Code', 'Year', 'Air transport, passengers carried'] with the target variable being Air transport having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/air-passengers-carried new.csv_preprocessed.csv')
target_variable = 'Air transport'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named air-passengers-carried new.csv having columns ['Entity', 'Code', 'Year', 'Air transport, passengers carried'] with the target variable being Air transport having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/air-passengers-carried new.csv_preprocessed.csv')
target_variable = 'Air transport'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named air-passengers-carried new.csv having columns ['Entity', 'Code', 'Year', 'Air transport, passengers carried'] with the target variable being Air transport having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/air-passengers-carried new.csv_preprocessed.csv')
target_variable = 'Air transport'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named air-passengers-carried new.csv having columns ['Entity', 'Code', 'Year', 'Air transport, passengers carried'] with the target variable being passengers carried having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/air-passengers-carried new.csv_preprocessed.csv')
target_variable = 'passengers carried'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named air-passengers-carried new.csv having columns ['Entity', 'Code', 'Year', 'Air transport, passengers carried'] with the target variable being passengers carried having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/air-passengers-carried new.csv_preprocessed.csv')
target_variable = 'passengers carried'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named air-passengers-carried new.csv having columns ['Entity', 'Code', 'Year', 'Air transport, passengers carried'] with the target variable being passengers carried having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/air-passengers-carried new.csv_preprocessed.csv')
target_variable = 'passengers carried'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named air-passengers-carried new.csv having columns ['Entity', 'Code', 'Year', 'Air transport, passengers carried'] with the target variable being passengers carried having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/air-passengers-carried new.csv_preprocessed.csv')
target_variable = 'passengers carried'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named air-passengers-carried new.csv having columns ['Entity', 'Code', 'Year', 'Air transport, passengers carried'] with the target variable being passengers carried having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/air-passengers-carried new.csv_preprocessed.csv')
target_variable = 'passengers carried'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named air-passengers-carried new.csv having columns ['Entity', 'Code', 'Year', 'Air transport, passengers carried'] with the target variable being passengers carried having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/air-passengers-carried new.csv_preprocessed.csv')
target_variable = 'passengers carried'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named air-passengers-carried new.csv having columns ['Entity', 'Code', 'Year', 'Air transport, passengers carried'] with the target variable being passengers carried having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/air-passengers-carried new.csv_preprocessed.csv')
target_variable = 'passengers carried'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named air-passengers-carried new.csv having columns ['Entity', 'Code', 'Year', 'Air transport, passengers carried'] with the target variable being passengers carried having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/air-passengers-carried new.csv_preprocessed.csv')
target_variable = 'passengers carried'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named air-passengers-carried new.csv having columns ['Entity', 'Code', 'Year', 'Air transport, passengers carried'] with the target variable being passengers carried having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/air-passengers-carried new.csv_preprocessed.csv')
target_variable = 'passengers carried'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named air-passengers-carried new.csv having columns ['Entity', 'Code', 'Year', 'Air transport, passengers carried'] with the target variable being passengers carried having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/air-passengers-carried new.csv_preprocessed.csv')
target_variable = 'passengers carried'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named air-passengers-carried new.csv having columns ['Entity', 'Code', 'Year', 'Air transport, passengers carried'] with the target variable being passengers carried having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/air-passengers-carried new.csv_preprocessed.csv')
target_variable = 'passengers carried'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named air-passengers-carried new.csv having columns ['Entity', 'Code', 'Year', 'Air transport, passengers carried'] with the target variable being passengers carried having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/air-passengers-carried new.csv_preprocessed.csv')
target_variable = 'passengers carried'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named car data.csv having columns ['Car_Name', 'Year', 'Selling_Price', 'Present_Price', 'Driven_kms', 'Fuel_Type', 'Selling_type', 'Transmission', 'Owner'] with the target variable being Selling_Price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/car data.csv_preprocessed.csv')
target_variable = 'Selling_Price'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named car data.csv having columns ['Car_Name', 'Year', 'Selling_Price', 'Present_Price', 'Driven_kms', 'Fuel_Type', 'Selling_type', 'Transmission', 'Owner'] with the target variable being Selling_Price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/car data.csv_preprocessed.csv')
target_variable = 'Selling_Price'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named car data.csv having columns ['Car_Name', 'Year', 'Selling_Price', 'Present_Price', 'Driven_kms', 'Fuel_Type', 'Selling_type', 'Transmission', 'Owner'] with the target variable being Selling_Price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/car data.csv_preprocessed.csv')
target_variable = 'Selling_Price'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named car data.csv having columns ['Car_Name', 'Year', 'Selling_Price', 'Present_Price', 'Driven_kms', 'Fuel_Type', 'Selling_type', 'Transmission', 'Owner'] with the target variable being Selling_Price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/car data.csv_preprocessed.csv')
target_variable = 'Selling_Price'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named car data.csv having columns ['Car_Name', 'Year', 'Selling_Price', 'Present_Price', 'Driven_kms', 'Fuel_Type', 'Selling_type', 'Transmission', 'Owner'] with the target variable being Selling_Price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/car data.csv_preprocessed.csv')
target_variable = 'Selling_Price'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named car data.csv having columns ['Car_Name', 'Year', 'Selling_Price', 'Present_Price', 'Driven_kms', 'Fuel_Type', 'Selling_type', 'Transmission', 'Owner'] with the target variable being Selling_Price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/car data.csv_preprocessed.csv')
target_variable = 'Selling_Price'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named car data.csv having columns ['Car_Name', 'Year', 'Selling_Price', 'Present_Price', 'Driven_kms', 'Fuel_Type', 'Selling_type', 'Transmission', 'Owner'] with the target variable being Selling_Price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/car data.csv_preprocessed.csv')
target_variable = 'Selling_Price'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named car data.csv having columns ['Car_Name', 'Year', 'Selling_Price', 'Present_Price', 'Driven_kms', 'Fuel_Type', 'Selling_type', 'Transmission', 'Owner'] with the target variable being Selling_Price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/car data.csv_preprocessed.csv')
target_variable = 'Selling_Price'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named car data.csv having columns ['Car_Name', 'Year', 'Selling_Price', 'Present_Price', 'Driven_kms', 'Fuel_Type', 'Selling_type', 'Transmission', 'Owner'] with the target variable being Selling_Price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/car data.csv_preprocessed.csv')
target_variable = 'Selling_Price'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named car data.csv having columns ['Car_Name', 'Year', 'Selling_Price', 'Present_Price', 'Driven_kms', 'Fuel_Type', 'Selling_type', 'Transmission', 'Owner'] with the target variable being Selling_Price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/car data.csv_preprocessed.csv')
target_variable = 'Selling_Price'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named car data.csv having columns ['Car_Name', 'Year', 'Selling_Price', 'Present_Price', 'Driven_kms', 'Fuel_Type', 'Selling_type', 'Transmission', 'Owner'] with the target variable being Selling_Price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/car data.csv_preprocessed.csv')
target_variable = 'Selling_Price'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named car data.csv having columns ['Car_Name', 'Year', 'Selling_Price', 'Present_Price', 'Driven_kms', 'Fuel_Type', 'Selling_type', 'Transmission', 'Owner'] with the target variable being Selling_Price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/car data.csv_preprocessed.csv')
target_variable = 'Selling_Price'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named car data.csv having columns ['Car_Name', 'Year', 'Selling_Price', 'Present_Price', 'Driven_kms', 'Fuel_Type', 'Selling_type', 'Transmission', 'Owner'] with the target variable being Present_Price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/car data.csv_preprocessed.csv')
target_variable = 'Present_Price'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named car data.csv having columns ['Car_Name', 'Year', 'Selling_Price', 'Present_Price', 'Driven_kms', 'Fuel_Type', 'Selling_type', 'Transmission', 'Owner'] with the target variable being Present_Price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/car data.csv_preprocessed.csv')
target_variable = 'Present_Price'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named car data.csv having columns ['Car_Name', 'Year', 'Selling_Price', 'Present_Price', 'Driven_kms', 'Fuel_Type', 'Selling_type', 'Transmission', 'Owner'] with the target variable being Present_Price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/car data.csv_preprocessed.csv')
target_variable = 'Present_Price'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named car data.csv having columns ['Car_Name', 'Year', 'Selling_Price', 'Present_Price', 'Driven_kms', 'Fuel_Type', 'Selling_type', 'Transmission', 'Owner'] with the target variable being Present_Price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/car data.csv_preprocessed.csv')
target_variable = 'Present_Price'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named car data.csv having columns ['Car_Name', 'Year', 'Selling_Price', 'Present_Price', 'Driven_kms', 'Fuel_Type', 'Selling_type', 'Transmission', 'Owner'] with the target variable being Present_Price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/car data.csv_preprocessed.csv')
target_variable = 'Present_Price'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named car data.csv having columns ['Car_Name', 'Year', 'Selling_Price', 'Present_Price', 'Driven_kms', 'Fuel_Type', 'Selling_type', 'Transmission', 'Owner'] with the target variable being Present_Price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/car data.csv_preprocessed.csv')
target_variable = 'Present_Price'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named car data.csv having columns ['Car_Name', 'Year', 'Selling_Price', 'Present_Price', 'Driven_kms', 'Fuel_Type', 'Selling_type', 'Transmission', 'Owner'] with the target variable being Present_Price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/car data.csv_preprocessed.csv')
target_variable = 'Present_Price'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named car data.csv having columns ['Car_Name', 'Year', 'Selling_Price', 'Present_Price', 'Driven_kms', 'Fuel_Type', 'Selling_type', 'Transmission', 'Owner'] with the target variable being Present_Price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/car data.csv_preprocessed.csv')
target_variable = 'Present_Price'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named car data.csv having columns ['Car_Name', 'Year', 'Selling_Price', 'Present_Price', 'Driven_kms', 'Fuel_Type', 'Selling_type', 'Transmission', 'Owner'] with the target variable being Present_Price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/car data.csv_preprocessed.csv')
target_variable = 'Present_Price'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named car data.csv having columns ['Car_Name', 'Year', 'Selling_Price', 'Present_Price', 'Driven_kms', 'Fuel_Type', 'Selling_type', 'Transmission', 'Owner'] with the target variable being Present_Price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/car data.csv_preprocessed.csv')
target_variable = 'Present_Price'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named car data.csv having columns ['Car_Name', 'Year', 'Selling_Price', 'Present_Price', 'Driven_kms', 'Fuel_Type', 'Selling_type', 'Transmission', 'Owner'] with the target variable being Present_Price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/car data.csv_preprocessed.csv')
target_variable = 'Present_Price'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named car data.csv having columns ['Car_Name', 'Year', 'Selling_Price', 'Present_Price', 'Driven_kms', 'Fuel_Type', 'Selling_type', 'Transmission', 'Owner'] with the target variable being Present_Price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/car data.csv_preprocessed.csv')
target_variable = 'Present_Price'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being Page.Loads having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'Page.Loads'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being Page.Loads having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'Page.Loads'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being Page.Loads having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'Page.Loads'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being Page.Loads having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'Page.Loads'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being Page.Loads having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'Page.Loads'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being Page.Loads having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'Page.Loads'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being Page.Loads having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'Page.Loads'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being Page.Loads having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'Page.Loads'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being Page.Loads having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'Page.Loads'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being Page.Loads having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'Page.Loads'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being Page.Loads having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'Page.Loads'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being Page.Loads having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'Page.Loads'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being Unique.Visits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'Unique.Visits'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being Unique.Visits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'Unique.Visits'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being Unique.Visits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'Unique.Visits'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being Unique.Visits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'Unique.Visits'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being Unique.Visits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'Unique.Visits'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being Unique.Visits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'Unique.Visits'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being Unique.Visits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'Unique.Visits'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being Unique.Visits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'Unique.Visits'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being Unique.Visits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'Unique.Visits'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being Unique.Visits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'Unique.Visits'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being Unique.Visits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'Unique.Visits'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being Unique.Visits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'Unique.Visits'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being First.Time.Visits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'First.Time.Visits'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being First.Time.Visits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'First.Time.Visits'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being First.Time.Visits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'First.Time.Visits'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being First.Time.Visits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'First.Time.Visits'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being First.Time.Visits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'First.Time.Visits'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being First.Time.Visits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'First.Time.Visits'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being First.Time.Visits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'First.Time.Visits'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being First.Time.Visits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'First.Time.Visits'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being First.Time.Visits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'First.Time.Visits'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being First.Time.Visits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'First.Time.Visits'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being First.Time.Visits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'First.Time.Visits'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being First.Time.Visits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'First.Time.Visits'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being Returning.Visits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'Returning.Visits'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being Returning.Visits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'Returning.Visits'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being Returning.Visits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'Returning.Visits'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being Returning.Visits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'Returning.Visits'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being Returning.Visits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'Returning.Visits'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being Returning.Visits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'Returning.Visits'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being Returning.Visits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'Returning.Visits'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being Returning.Visits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'Returning.Visits'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being Returning.Visits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'Returning.Visits'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being Returning.Visits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'Returning.Visits'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being Returning.Visits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'Returning.Visits'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named daily-website-visitors.csv having columns ['Row', 'Day', 'Day.Of.Week', 'Date', 'Page.Loads', 'Unique.Visits', 'First.Time.Visits', 'Returning.Visits'] with the target variable being Returning.Visits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/daily-website-visitors.csv_preprocessed.csv')
target_variable = 'Returning.Visits'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named data.csv having columns ['process.b1.capacity', 'process.b2.capacity', 'process.b3.capacity', 'process.b4.capacity', 'property.price', 'property.product', 'property.winner', 'verification.result', 'verification.time'] with the target variable being property.price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/data.csv_preprocessed.csv')
target_variable = 'property.price'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['verification.time',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['verification.time',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named data.csv having columns ['process.b1.capacity', 'process.b2.capacity', 'process.b3.capacity', 'process.b4.capacity', 'property.price', 'property.product', 'property.winner', 'verification.result', 'verification.time'] with the target variable being property.price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/data.csv_preprocessed.csv')
target_variable = 'property.price'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['verification.time',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['verification.time',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named data.csv having columns ['process.b1.capacity', 'process.b2.capacity', 'process.b3.capacity', 'process.b4.capacity', 'property.price', 'property.product', 'property.winner', 'verification.result', 'verification.time'] with the target variable being property.price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/data.csv_preprocessed.csv')
target_variable = 'property.price'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['verification.time',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['verification.time',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named data.csv having columns ['process.b1.capacity', 'process.b2.capacity', 'process.b3.capacity', 'process.b4.capacity', 'property.price', 'property.product', 'property.winner', 'verification.result', 'verification.time'] with the target variable being property.price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/data.csv_preprocessed.csv')
target_variable = 'property.price'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['verification.time',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['verification.time',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named data.csv having columns ['process.b1.capacity', 'process.b2.capacity', 'process.b3.capacity', 'process.b4.capacity', 'property.price', 'property.product', 'property.winner', 'verification.result', 'verification.time'] with the target variable being property.price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/data.csv_preprocessed.csv')
target_variable = 'property.price'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['verification.time',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['verification.time',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named data.csv having columns ['process.b1.capacity', 'process.b2.capacity', 'process.b3.capacity', 'process.b4.capacity', 'property.price', 'property.product', 'property.winner', 'verification.result', 'verification.time'] with the target variable being property.price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/data.csv_preprocessed.csv')
target_variable = 'property.price'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['verification.time',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['verification.time',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named data.csv having columns ['process.b1.capacity', 'process.b2.capacity', 'process.b3.capacity', 'process.b4.capacity', 'property.price', 'property.product', 'property.winner', 'verification.result', 'verification.time'] with the target variable being property.price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/data.csv_preprocessed.csv')
target_variable = 'property.price'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['verification.time',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['verification.time',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named data.csv having columns ['process.b1.capacity', 'process.b2.capacity', 'process.b3.capacity', 'process.b4.capacity', 'property.price', 'property.product', 'property.winner', 'verification.result', 'verification.time'] with the target variable being property.price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/data.csv_preprocessed.csv')
target_variable = 'property.price'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['verification.time',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['verification.time',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named data.csv having columns ['process.b1.capacity', 'process.b2.capacity', 'process.b3.capacity', 'process.b4.capacity', 'property.price', 'property.product', 'property.winner', 'verification.result', 'verification.time'] with the target variable being property.price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/data.csv_preprocessed.csv')
target_variable = 'property.price'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['verification.time',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['verification.time',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named data.csv having columns ['process.b1.capacity', 'process.b2.capacity', 'process.b3.capacity', 'process.b4.capacity', 'property.price', 'property.product', 'property.winner', 'verification.result', 'verification.time'] with the target variable being property.price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/data.csv_preprocessed.csv')
target_variable = 'property.price'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['verification.time',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['verification.time',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named data.csv having columns ['process.b1.capacity', 'process.b2.capacity', 'process.b3.capacity', 'process.b4.capacity', 'property.price', 'property.product', 'property.winner', 'verification.result', 'verification.time'] with the target variable being property.price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/data.csv_preprocessed.csv')
target_variable = 'property.price'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['verification.time',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['verification.time',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named data.csv having columns ['process.b1.capacity', 'process.b2.capacity', 'process.b3.capacity', 'process.b4.capacity', 'property.price', 'property.product', 'property.winner', 'verification.result', 'verification.time'] with the target variable being property.price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/data.csv_preprocessed.csv')
target_variable = 'property.price'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['verification.time',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['verification.time',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being actual_delivery_time having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'actual_delivery_time'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being actual_delivery_time having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'actual_delivery_time'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being actual_delivery_time having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'actual_delivery_time'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being actual_delivery_time having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'actual_delivery_time'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being actual_delivery_time having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'actual_delivery_time'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being actual_delivery_time having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'actual_delivery_time'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being actual_delivery_time having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'actual_delivery_time'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being actual_delivery_time having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'actual_delivery_time'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being actual_delivery_time having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'actual_delivery_time'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being actual_delivery_time having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'actual_delivery_time'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being actual_delivery_time having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'actual_delivery_time'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being actual_delivery_time having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'actual_delivery_time'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_items having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_items'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_items having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_items'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_items having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_items'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_items having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_items'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_items having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_items'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_items having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_items'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_items having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_items'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_items having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_items'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_items having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_items'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_items having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_items'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_items having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_items'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_items having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_items'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being subtotal having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'subtotal'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being subtotal having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'subtotal'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being subtotal having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'subtotal'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being subtotal having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'subtotal'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being subtotal having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'subtotal'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being subtotal having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'subtotal'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being subtotal having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'subtotal'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being subtotal having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'subtotal'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being subtotal having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'subtotal'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being subtotal having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'subtotal'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being subtotal having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'subtotal'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being subtotal having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'subtotal'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being num_distinct_items having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'num_distinct_items'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being num_distinct_items having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'num_distinct_items'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being num_distinct_items having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'num_distinct_items'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being num_distinct_items having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'num_distinct_items'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being num_distinct_items having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'num_distinct_items'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being num_distinct_items having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'num_distinct_items'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being num_distinct_items having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'num_distinct_items'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being num_distinct_items having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'num_distinct_items'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being num_distinct_items having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'num_distinct_items'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being num_distinct_items having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'num_distinct_items'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being num_distinct_items having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'num_distinct_items'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being num_distinct_items having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'num_distinct_items'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being min_item_price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'min_item_price'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being min_item_price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'min_item_price'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being min_item_price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'min_item_price'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being min_item_price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'min_item_price'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being min_item_price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'min_item_price'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being min_item_price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'min_item_price'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being min_item_price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'min_item_price'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being min_item_price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'min_item_price'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being min_item_price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'min_item_price'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being min_item_price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'min_item_price'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being min_item_price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'min_item_price'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being min_item_price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'min_item_price'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being max_item_price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'max_item_price'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being max_item_price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'max_item_price'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being max_item_price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'max_item_price'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being max_item_price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'max_item_price'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being max_item_price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'max_item_price'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being max_item_price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'max_item_price'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being max_item_price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'max_item_price'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being max_item_price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'max_item_price'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being max_item_price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'max_item_price'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being max_item_price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'max_item_price'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being max_item_price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'max_item_price'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being max_item_price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'max_item_price'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_onshift_partners having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_onshift_partners'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_onshift_partners having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_onshift_partners'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_onshift_partners having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_onshift_partners'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_onshift_partners having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_onshift_partners'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_onshift_partners having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_onshift_partners'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_onshift_partners having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_onshift_partners'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_onshift_partners having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_onshift_partners'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_onshift_partners having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_onshift_partners'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_onshift_partners having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_onshift_partners'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_onshift_partners having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_onshift_partners'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_onshift_partners having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_onshift_partners'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_onshift_partners having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_onshift_partners'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_busy_partners having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_busy_partners'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_busy_partners having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_busy_partners'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_busy_partners having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_busy_partners'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_busy_partners having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_busy_partners'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_busy_partners having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_busy_partners'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_busy_partners having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_busy_partners'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_busy_partners having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_busy_partners'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_busy_partners having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_busy_partners'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_busy_partners having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_busy_partners'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_busy_partners having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_busy_partners'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_busy_partners having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_busy_partners'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_busy_partners having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_busy_partners'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_outstanding_orders having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_outstanding_orders'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_outstanding_orders having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_outstanding_orders'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_outstanding_orders having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_outstanding_orders'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_outstanding_orders having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_outstanding_orders'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_outstanding_orders having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_outstanding_orders'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_outstanding_orders having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_outstanding_orders'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_outstanding_orders having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_outstanding_orders'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_outstanding_orders having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_outstanding_orders'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_outstanding_orders having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_outstanding_orders'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_outstanding_orders having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_outstanding_orders'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_outstanding_orders having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_outstanding_orders'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named dataset.csv having columns ['market_id', 'created_at', 'actual_delivery_time', 'store_id', 'store_primary_category', 'order_protocol', 'total_items', 'subtotal', 'num_distinct_items', 'min_item_price', 'max_item_price', 'total_onshift_partners', 'total_busy_partners', 'total_outstanding_orders'] with the target variable being total_outstanding_orders having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/dataset.csv_preprocessed.csv')
target_variable = 'total_outstanding_orders'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['created_at',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named diamonds.csv having columns ['Unnamed: 0', 'carat', 'cut', 'color', 'clarity', 'depth', 'table', 'price', 'x', 'y', 'z'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/diamonds.csv_preprocessed.csv')
target_variable = 'price'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named diamonds.csv having columns ['Unnamed: 0', 'carat', 'cut', 'color', 'clarity', 'depth', 'table', 'price', 'x', 'y', 'z'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/diamonds.csv_preprocessed.csv')
target_variable = 'price'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named diamonds.csv having columns ['Unnamed: 0', 'carat', 'cut', 'color', 'clarity', 'depth', 'table', 'price', 'x', 'y', 'z'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/diamonds.csv_preprocessed.csv')
target_variable = 'price'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named diamonds.csv having columns ['Unnamed: 0', 'carat', 'cut', 'color', 'clarity', 'depth', 'table', 'price', 'x', 'y', 'z'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/diamonds.csv_preprocessed.csv')
target_variable = 'price'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named diamonds.csv having columns ['Unnamed: 0', 'carat', 'cut', 'color', 'clarity', 'depth', 'table', 'price', 'x', 'y', 'z'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/diamonds.csv_preprocessed.csv')
target_variable = 'price'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named diamonds.csv having columns ['Unnamed: 0', 'carat', 'cut', 'color', 'clarity', 'depth', 'table', 'price', 'x', 'y', 'z'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/diamonds.csv_preprocessed.csv')
target_variable = 'price'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named diamonds.csv having columns ['Unnamed: 0', 'carat', 'cut', 'color', 'clarity', 'depth', 'table', 'price', 'x', 'y', 'z'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/diamonds.csv_preprocessed.csv')
target_variable = 'price'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named diamonds.csv having columns ['Unnamed: 0', 'carat', 'cut', 'color', 'clarity', 'depth', 'table', 'price', 'x', 'y', 'z'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/diamonds.csv_preprocessed.csv')
target_variable = 'price'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named diamonds.csv having columns ['Unnamed: 0', 'carat', 'cut', 'color', 'clarity', 'depth', 'table', 'price', 'x', 'y', 'z'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/diamonds.csv_preprocessed.csv')
target_variable = 'price'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named diamonds.csv having columns ['Unnamed: 0', 'carat', 'cut', 'color', 'clarity', 'depth', 'table', 'price', 'x', 'y', 'z'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/diamonds.csv_preprocessed.csv')
target_variable = 'price'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named diamonds.csv having columns ['Unnamed: 0', 'carat', 'cut', 'color', 'clarity', 'depth', 'table', 'price', 'x', 'y', 'z'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/diamonds.csv_preprocessed.csv')
target_variable = 'price'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named diamonds.csv having columns ['Unnamed: 0', 'carat', 'cut', 'color', 'clarity', 'depth', 'table', 'price', 'x', 'y', 'z'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/diamonds.csv_preprocessed.csv')
target_variable = 'price'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being FFMC having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'FFMC'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being FFMC having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'FFMC'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being FFMC having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'FFMC'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being FFMC having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'FFMC'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being FFMC having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'FFMC'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being FFMC having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'FFMC'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being FFMC having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'FFMC'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being FFMC having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'FFMC'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being FFMC having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'FFMC'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being FFMC having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'FFMC'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being FFMC having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'FFMC'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being FFMC having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'FFMC'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being DMC having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'DMC'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being DMC having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'DMC'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being DMC having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'DMC'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being DMC having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'DMC'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being DMC having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'DMC'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being DMC having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'DMC'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being DMC having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'DMC'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being DMC having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'DMC'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being DMC having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'DMC'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being DMC having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'DMC'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being DMC having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'DMC'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being DMC having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'DMC'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being DC having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'DC'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being DC having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'DC'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being DC having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'DC'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being DC having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'DC'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being DC having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'DC'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being DC having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'DC'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being DC having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'DC'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being DC having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'DC'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being DC having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'DC'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being DC having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'DC'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being DC having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'DC'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being DC having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'DC'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being ISI having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'ISI'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being ISI having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'ISI'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being ISI having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'ISI'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being ISI having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'ISI'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being ISI having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'ISI'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being ISI having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'ISI'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being ISI having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'ISI'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being ISI having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'ISI'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being ISI having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'ISI'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being ISI having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'ISI'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being ISI having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'ISI'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being ISI having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'ISI'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being temp having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'temp'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being temp having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'temp'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being temp having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'temp'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being temp having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'temp'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being temp having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'temp'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being temp having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'temp'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being temp having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'temp'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being temp having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'temp'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being temp having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'temp'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being temp having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'temp'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being temp having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'temp'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being temp having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'temp'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being RH having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'RH'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being RH having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'RH'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being RH having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'RH'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being RH having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'RH'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being RH having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'RH'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being RH having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'RH'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being RH having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'RH'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being RH having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'RH'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being RH having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'RH'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being RH having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'RH'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being RH having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'RH'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being RH having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'RH'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being wind having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'wind'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being wind having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'wind'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being wind having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'wind'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being wind having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'wind'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being wind having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'wind'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being wind having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'wind'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being wind having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'wind'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being wind having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'wind'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being wind having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'wind'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being wind having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'wind'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being wind having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'wind'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being wind having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'wind'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being area having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'area'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being area having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'area'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being area having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'area'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being area having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'area'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being area having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'area'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being area having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'area'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being area having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'area'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being area having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'area'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being area having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'area'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being area having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'area'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being area having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'area'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named forestfires.csv having columns ['X', 'Y', 'month', 'day', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'] with the target variable being area having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/forestfires.csv_preprocessed.csv')
target_variable = 'area'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named garments_worker_productivity.csv having columns ['date', 'quarter', 'department', 'day', 'team', 'targeted_productivity', 'smv', 'wip', 'over_time', 'incentive', 'idle_time', 'idle_men', 'no_of_style_change', 'no_of_workers', 'actual_productivity'] with the target variable being targeted_productivity having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/garments_worker_productivity.csv_preprocessed.csv')
target_variable = 'targeted_productivity'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named garments_worker_productivity.csv having columns ['date', 'quarter', 'department', 'day', 'team', 'targeted_productivity', 'smv', 'wip', 'over_time', 'incentive', 'idle_time', 'idle_men', 'no_of_style_change', 'no_of_workers', 'actual_productivity'] with the target variable being targeted_productivity having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/garments_worker_productivity.csv_preprocessed.csv')
target_variable = 'targeted_productivity'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named garments_worker_productivity.csv having columns ['date', 'quarter', 'department', 'day', 'team', 'targeted_productivity', 'smv', 'wip', 'over_time', 'incentive', 'idle_time', 'idle_men', 'no_of_style_change', 'no_of_workers', 'actual_productivity'] with the target variable being targeted_productivity having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/garments_worker_productivity.csv_preprocessed.csv')
target_variable = 'targeted_productivity'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named garments_worker_productivity.csv having columns ['date', 'quarter', 'department', 'day', 'team', 'targeted_productivity', 'smv', 'wip', 'over_time', 'incentive', 'idle_time', 'idle_men', 'no_of_style_change', 'no_of_workers', 'actual_productivity'] with the target variable being targeted_productivity having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/garments_worker_productivity.csv_preprocessed.csv')
target_variable = 'targeted_productivity'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named garments_worker_productivity.csv having columns ['date', 'quarter', 'department', 'day', 'team', 'targeted_productivity', 'smv', 'wip', 'over_time', 'incentive', 'idle_time', 'idle_men', 'no_of_style_change', 'no_of_workers', 'actual_productivity'] with the target variable being targeted_productivity having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/garments_worker_productivity.csv_preprocessed.csv')
target_variable = 'targeted_productivity'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named garments_worker_productivity.csv having columns ['date', 'quarter', 'department', 'day', 'team', 'targeted_productivity', 'smv', 'wip', 'over_time', 'incentive', 'idle_time', 'idle_men', 'no_of_style_change', 'no_of_workers', 'actual_productivity'] with the target variable being targeted_productivity having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/garments_worker_productivity.csv_preprocessed.csv')
target_variable = 'targeted_productivity'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named garments_worker_productivity.csv having columns ['date', 'quarter', 'department', 'day', 'team', 'targeted_productivity', 'smv', 'wip', 'over_time', 'incentive', 'idle_time', 'idle_men', 'no_of_style_change', 'no_of_workers', 'actual_productivity'] with the target variable being targeted_productivity having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/garments_worker_productivity.csv_preprocessed.csv')
target_variable = 'targeted_productivity'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named garments_worker_productivity.csv having columns ['date', 'quarter', 'department', 'day', 'team', 'targeted_productivity', 'smv', 'wip', 'over_time', 'incentive', 'idle_time', 'idle_men', 'no_of_style_change', 'no_of_workers', 'actual_productivity'] with the target variable being targeted_productivity having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/garments_worker_productivity.csv_preprocessed.csv')
target_variable = 'targeted_productivity'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named garments_worker_productivity.csv having columns ['date', 'quarter', 'department', 'day', 'team', 'targeted_productivity', 'smv', 'wip', 'over_time', 'incentive', 'idle_time', 'idle_men', 'no_of_style_change', 'no_of_workers', 'actual_productivity'] with the target variable being targeted_productivity having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/garments_worker_productivity.csv_preprocessed.csv')
target_variable = 'targeted_productivity'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named garments_worker_productivity.csv having columns ['date', 'quarter', 'department', 'day', 'team', 'targeted_productivity', 'smv', 'wip', 'over_time', 'incentive', 'idle_time', 'idle_men', 'no_of_style_change', 'no_of_workers', 'actual_productivity'] with the target variable being targeted_productivity having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/garments_worker_productivity.csv_preprocessed.csv')
target_variable = 'targeted_productivity'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named garments_worker_productivity.csv having columns ['date', 'quarter', 'department', 'day', 'team', 'targeted_productivity', 'smv', 'wip', 'over_time', 'incentive', 'idle_time', 'idle_men', 'no_of_style_change', 'no_of_workers', 'actual_productivity'] with the target variable being targeted_productivity having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/garments_worker_productivity.csv_preprocessed.csv')
target_variable = 'targeted_productivity'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named garments_worker_productivity.csv having columns ['date', 'quarter', 'department', 'day', 'team', 'targeted_productivity', 'smv', 'wip', 'over_time', 'incentive', 'idle_time', 'idle_men', 'no_of_style_change', 'no_of_workers', 'actual_productivity'] with the target variable being targeted_productivity having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/garments_worker_productivity.csv_preprocessed.csv')
target_variable = 'targeted_productivity'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named garments_worker_productivity.csv having columns ['date', 'quarter', 'department', 'day', 'team', 'targeted_productivity', 'smv', 'wip', 'over_time', 'incentive', 'idle_time', 'idle_men', 'no_of_style_change', 'no_of_workers', 'actual_productivity'] with the target variable being actual_productivity having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/garments_worker_productivity.csv_preprocessed.csv')
target_variable = 'actual_productivity'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named garments_worker_productivity.csv having columns ['date', 'quarter', 'department', 'day', 'team', 'targeted_productivity', 'smv', 'wip', 'over_time', 'incentive', 'idle_time', 'idle_men', 'no_of_style_change', 'no_of_workers', 'actual_productivity'] with the target variable being actual_productivity having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/garments_worker_productivity.csv_preprocessed.csv')
target_variable = 'actual_productivity'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named garments_worker_productivity.csv having columns ['date', 'quarter', 'department', 'day', 'team', 'targeted_productivity', 'smv', 'wip', 'over_time', 'incentive', 'idle_time', 'idle_men', 'no_of_style_change', 'no_of_workers', 'actual_productivity'] with the target variable being actual_productivity having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/garments_worker_productivity.csv_preprocessed.csv')
target_variable = 'actual_productivity'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named garments_worker_productivity.csv having columns ['date', 'quarter', 'department', 'day', 'team', 'targeted_productivity', 'smv', 'wip', 'over_time', 'incentive', 'idle_time', 'idle_men', 'no_of_style_change', 'no_of_workers', 'actual_productivity'] with the target variable being actual_productivity having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/garments_worker_productivity.csv_preprocessed.csv')
target_variable = 'actual_productivity'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named garments_worker_productivity.csv having columns ['date', 'quarter', 'department', 'day', 'team', 'targeted_productivity', 'smv', 'wip', 'over_time', 'incentive', 'idle_time', 'idle_men', 'no_of_style_change', 'no_of_workers', 'actual_productivity'] with the target variable being actual_productivity having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/garments_worker_productivity.csv_preprocessed.csv')
target_variable = 'actual_productivity'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named garments_worker_productivity.csv having columns ['date', 'quarter', 'department', 'day', 'team', 'targeted_productivity', 'smv', 'wip', 'over_time', 'incentive', 'idle_time', 'idle_men', 'no_of_style_change', 'no_of_workers', 'actual_productivity'] with the target variable being actual_productivity having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/garments_worker_productivity.csv_preprocessed.csv')
target_variable = 'actual_productivity'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named garments_worker_productivity.csv having columns ['date', 'quarter', 'department', 'day', 'team', 'targeted_productivity', 'smv', 'wip', 'over_time', 'incentive', 'idle_time', 'idle_men', 'no_of_style_change', 'no_of_workers', 'actual_productivity'] with the target variable being actual_productivity having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/garments_worker_productivity.csv_preprocessed.csv')
target_variable = 'actual_productivity'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named garments_worker_productivity.csv having columns ['date', 'quarter', 'department', 'day', 'team', 'targeted_productivity', 'smv', 'wip', 'over_time', 'incentive', 'idle_time', 'idle_men', 'no_of_style_change', 'no_of_workers', 'actual_productivity'] with the target variable being actual_productivity having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/garments_worker_productivity.csv_preprocessed.csv')
target_variable = 'actual_productivity'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named garments_worker_productivity.csv having columns ['date', 'quarter', 'department', 'day', 'team', 'targeted_productivity', 'smv', 'wip', 'over_time', 'incentive', 'idle_time', 'idle_men', 'no_of_style_change', 'no_of_workers', 'actual_productivity'] with the target variable being actual_productivity having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/garments_worker_productivity.csv_preprocessed.csv')
target_variable = 'actual_productivity'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named garments_worker_productivity.csv having columns ['date', 'quarter', 'department', 'day', 'team', 'targeted_productivity', 'smv', 'wip', 'over_time', 'incentive', 'idle_time', 'idle_men', 'no_of_style_change', 'no_of_workers', 'actual_productivity'] with the target variable being actual_productivity having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/garments_worker_productivity.csv_preprocessed.csv')
target_variable = 'actual_productivity'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named garments_worker_productivity.csv having columns ['date', 'quarter', 'department', 'day', 'team', 'targeted_productivity', 'smv', 'wip', 'over_time', 'incentive', 'idle_time', 'idle_men', 'no_of_style_change', 'no_of_workers', 'actual_productivity'] with the target variable being actual_productivity having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/garments_worker_productivity.csv_preprocessed.csv')
target_variable = 'actual_productivity'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named garments_worker_productivity.csv having columns ['date', 'quarter', 'department', 'day', 'team', 'targeted_productivity', 'smv', 'wip', 'over_time', 'incentive', 'idle_time', 'idle_men', 'no_of_style_change', 'no_of_workers', 'actual_productivity'] with the target variable being actual_productivity having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/garments_worker_productivity.csv_preprocessed.csv')
target_variable = 'actual_productivity'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['day',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being age having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'age'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being age having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'age'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being age having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'age'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being age having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'age'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being age having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'age'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being age having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'age'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being age having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'age'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being age having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'age'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being age having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'age'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being age having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'age'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being age having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'age'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being age having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'age'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being bmi having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'bmi'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being bmi having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'bmi'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being bmi having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'bmi'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being bmi having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'bmi'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being bmi having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'bmi'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being bmi having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'bmi'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being bmi having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'bmi'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being bmi having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'bmi'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being bmi having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'bmi'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being bmi having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'bmi'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being bmi having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'bmi'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being bmi having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'bmi'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being children having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'children'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being children having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'children'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being children having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'children'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being children having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'children'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being children having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'children'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being children having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'children'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being children having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'children'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being children having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'children'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being children having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'children'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being children having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'children'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being children having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'children'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being children having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'children'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being charges having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'charges'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being charges having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'charges'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being charges having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'charges'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being charges having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'charges'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being charges having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'charges'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being charges having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'charges'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being charges having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'charges'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being charges having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'charges'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being charges having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'charges'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being charges having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'charges'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being charges having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'charges'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named insurance.csv having columns ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'] with the target variable being charges having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/insurance.csv_preprocessed.csv')
target_variable = 'charges'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'price'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'price'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'price'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'price'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'price'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'price'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'price'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'price'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'price'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'price'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'price'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being price having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'price'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being bedrooms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'bedrooms'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being bedrooms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'bedrooms'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being bedrooms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'bedrooms'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being bedrooms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'bedrooms'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being bedrooms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'bedrooms'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being bedrooms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'bedrooms'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being bedrooms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'bedrooms'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being bedrooms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'bedrooms'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being bedrooms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'bedrooms'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being bedrooms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'bedrooms'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being bedrooms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'bedrooms'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being bedrooms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'bedrooms'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being bathrooms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'bathrooms'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being bathrooms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'bathrooms'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being bathrooms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'bathrooms'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being bathrooms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'bathrooms'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being bathrooms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'bathrooms'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being bathrooms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'bathrooms'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being bathrooms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'bathrooms'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being bathrooms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'bathrooms'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being bathrooms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'bathrooms'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being bathrooms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'bathrooms'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being bathrooms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'bathrooms'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being bathrooms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'bathrooms'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_living having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_living'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_living having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_living'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_living having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_living'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_living having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_living'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_living having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_living'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_living having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_living'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_living having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_living'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_living having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_living'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_living having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_living'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_living having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_living'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_living having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_living'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_living having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_living'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_lot having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_lot'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_lot having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_lot'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_lot having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_lot'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_lot having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_lot'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_lot having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_lot'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_lot having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_lot'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_lot having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_lot'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_lot having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_lot'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_lot having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_lot'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_lot having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_lot'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_lot having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_lot'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_lot having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_lot'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being floors having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'floors'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being floors having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'floors'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being floors having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'floors'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being floors having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'floors'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being floors having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'floors'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being floors having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'floors'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being floors having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'floors'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being floors having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'floors'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being floors having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'floors'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being floors having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'floors'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being floors having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'floors'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being floors having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'floors'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being view having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'view'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being view having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'view'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being view having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'view'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being view having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'view'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being view having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'view'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being view having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'view'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being view having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'view'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being view having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'view'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being view having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'view'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being view having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'view'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being view having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'view'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being view having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'view'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_above having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_above'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_above having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_above'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_above having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_above'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_above having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_above'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_above having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_above'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_above having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_above'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_above having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_above'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_above having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_above'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_above having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_above'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_above having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_above'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_above having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_above'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_above having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_above'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_basement having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_basement'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_basement having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_basement'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_basement having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_basement'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_basement having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_basement'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_basement having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_basement'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_basement having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_basement'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_basement having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_basement'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_basement having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_basement'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_basement having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_basement'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_basement having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_basement'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_basement having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_basement'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named kc_house_data.csv having columns ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] with the target variable being sqft_basement having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/kc_house_data.csv_preprocessed.csv')
target_variable = 'sqft_basement'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['id','date',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named manufacturing.csv having columns ['Temperature (°C)', 'Pressure (kPa)', 'Temperature x Pressure', 'Material Fusion Metric', 'Material Transformation Metric', 'Quality Rating'] with the target variable being Temperature (°C) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/manufacturing.csv_preprocessed.csv')
target_variable = 'Temperature (°C)'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named manufacturing.csv having columns ['Temperature (°C)', 'Pressure (kPa)', 'Temperature x Pressure', 'Material Fusion Metric', 'Material Transformation Metric', 'Quality Rating'] with the target variable being Temperature (°C) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/manufacturing.csv_preprocessed.csv')
target_variable = 'Temperature (°C)'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named manufacturing.csv having columns ['Temperature (°C)', 'Pressure (kPa)', 'Temperature x Pressure', 'Material Fusion Metric', 'Material Transformation Metric', 'Quality Rating'] with the target variable being Temperature (°C) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/manufacturing.csv_preprocessed.csv')
target_variable = 'Temperature (°C)'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named manufacturing.csv having columns ['Temperature (°C)', 'Pressure (kPa)', 'Temperature x Pressure', 'Material Fusion Metric', 'Material Transformation Metric', 'Quality Rating'] with the target variable being Temperature (°C) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/manufacturing.csv_preprocessed.csv')
target_variable = 'Temperature (°C)'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named manufacturing.csv having columns ['Temperature (°C)', 'Pressure (kPa)', 'Temperature x Pressure', 'Material Fusion Metric', 'Material Transformation Metric', 'Quality Rating'] with the target variable being Temperature (°C) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/manufacturing.csv_preprocessed.csv')
target_variable = 'Temperature (°C)'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named manufacturing.csv having columns ['Temperature (°C)', 'Pressure (kPa)', 'Temperature x Pressure', 'Material Fusion Metric', 'Material Transformation Metric', 'Quality Rating'] with the target variable being Temperature (°C) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/manufacturing.csv_preprocessed.csv')
target_variable = 'Temperature (°C)'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named manufacturing.csv having columns ['Temperature (°C)', 'Pressure (kPa)', 'Temperature x Pressure', 'Material Fusion Metric', 'Material Transformation Metric', 'Quality Rating'] with the target variable being Temperature (°C) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/manufacturing.csv_preprocessed.csv')
target_variable = 'Temperature (°C)'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named manufacturing.csv having columns ['Temperature (°C)', 'Pressure (kPa)', 'Temperature x Pressure', 'Material Fusion Metric', 'Material Transformation Metric', 'Quality Rating'] with the target variable being Temperature (°C) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/manufacturing.csv_preprocessed.csv')
target_variable = 'Temperature (°C)'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named manufacturing.csv having columns ['Temperature (°C)', 'Pressure (kPa)', 'Temperature x Pressure', 'Material Fusion Metric', 'Material Transformation Metric', 'Quality Rating'] with the target variable being Temperature (°C) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/manufacturing.csv_preprocessed.csv')
target_variable = 'Temperature (°C)'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named manufacturing.csv having columns ['Temperature (°C)', 'Pressure (kPa)', 'Temperature x Pressure', 'Material Fusion Metric', 'Material Transformation Metric', 'Quality Rating'] with the target variable being Temperature (°C) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/manufacturing.csv_preprocessed.csv')
target_variable = 'Temperature (°C)'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named manufacturing.csv having columns ['Temperature (°C)', 'Pressure (kPa)', 'Temperature x Pressure', 'Material Fusion Metric', 'Material Transformation Metric', 'Quality Rating'] with the target variable being Temperature (°C) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/manufacturing.csv_preprocessed.csv')
target_variable = 'Temperature (°C)'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named manufacturing.csv having columns ['Temperature (°C)', 'Pressure (kPa)', 'Temperature x Pressure', 'Material Fusion Metric', 'Material Transformation Metric', 'Quality Rating'] with the target variable being Temperature (°C) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/manufacturing.csv_preprocessed.csv')
target_variable = 'Temperature (°C)'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named manufacturing.csv having columns ['Temperature (°C)', 'Pressure (kPa)', 'Temperature x Pressure', 'Material Fusion Metric', 'Material Transformation Metric', 'Quality Rating'] with the target variable being Pressure (kPa) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/manufacturing.csv_preprocessed.csv')
target_variable = 'Pressure (kPa)'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named manufacturing.csv having columns ['Temperature (°C)', 'Pressure (kPa)', 'Temperature x Pressure', 'Material Fusion Metric', 'Material Transformation Metric', 'Quality Rating'] with the target variable being Pressure (kPa) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/manufacturing.csv_preprocessed.csv')
target_variable = 'Pressure (kPa)'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named manufacturing.csv having columns ['Temperature (°C)', 'Pressure (kPa)', 'Temperature x Pressure', 'Material Fusion Metric', 'Material Transformation Metric', 'Quality Rating'] with the target variable being Pressure (kPa) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/manufacturing.csv_preprocessed.csv')
target_variable = 'Pressure (kPa)'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named manufacturing.csv having columns ['Temperature (°C)', 'Pressure (kPa)', 'Temperature x Pressure', 'Material Fusion Metric', 'Material Transformation Metric', 'Quality Rating'] with the target variable being Pressure (kPa) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/manufacturing.csv_preprocessed.csv')
target_variable = 'Pressure (kPa)'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named manufacturing.csv having columns ['Temperature (°C)', 'Pressure (kPa)', 'Temperature x Pressure', 'Material Fusion Metric', 'Material Transformation Metric', 'Quality Rating'] with the target variable being Pressure (kPa) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/manufacturing.csv_preprocessed.csv')
target_variable = 'Pressure (kPa)'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named manufacturing.csv having columns ['Temperature (°C)', 'Pressure (kPa)', 'Temperature x Pressure', 'Material Fusion Metric', 'Material Transformation Metric', 'Quality Rating'] with the target variable being Pressure (kPa) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/manufacturing.csv_preprocessed.csv')
target_variable = 'Pressure (kPa)'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named manufacturing.csv having columns ['Temperature (°C)', 'Pressure (kPa)', 'Temperature x Pressure', 'Material Fusion Metric', 'Material Transformation Metric', 'Quality Rating'] with the target variable being Pressure (kPa) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/manufacturing.csv_preprocessed.csv')
target_variable = 'Pressure (kPa)'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named manufacturing.csv having columns ['Temperature (°C)', 'Pressure (kPa)', 'Temperature x Pressure', 'Material Fusion Metric', 'Material Transformation Metric', 'Quality Rating'] with the target variable being Pressure (kPa) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/manufacturing.csv_preprocessed.csv')
target_variable = 'Pressure (kPa)'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named manufacturing.csv having columns ['Temperature (°C)', 'Pressure (kPa)', 'Temperature x Pressure', 'Material Fusion Metric', 'Material Transformation Metric', 'Quality Rating'] with the target variable being Pressure (kPa) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/manufacturing.csv_preprocessed.csv')
target_variable = 'Pressure (kPa)'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named manufacturing.csv having columns ['Temperature (°C)', 'Pressure (kPa)', 'Temperature x Pressure', 'Material Fusion Metric', 'Material Transformation Metric', 'Quality Rating'] with the target variable being Pressure (kPa) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/manufacturing.csv_preprocessed.csv')
target_variable = 'Pressure (kPa)'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named manufacturing.csv having columns ['Temperature (°C)', 'Pressure (kPa)', 'Temperature x Pressure', 'Material Fusion Metric', 'Material Transformation Metric', 'Quality Rating'] with the target variable being Pressure (kPa) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/manufacturing.csv_preprocessed.csv')
target_variable = 'Pressure (kPa)'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named manufacturing.csv having columns ['Temperature (°C)', 'Pressure (kPa)', 'Temperature x Pressure', 'Material Fusion Metric', 'Material Transformation Metric', 'Quality Rating'] with the target variable being Pressure (kPa) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/manufacturing.csv_preprocessed.csv')
target_variable = 'Pressure (kPa)'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named manufacturing.csv having columns ['Temperature (°C)', 'Pressure (kPa)', 'Temperature x Pressure', 'Material Fusion Metric', 'Material Transformation Metric', 'Quality Rating'] with the target variable being Temperature x Pressure having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/manufacturing.csv_preprocessed.csv')
target_variable = 'Temperature x Pressure'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named manufacturing.csv having columns ['Temperature (°C)', 'Pressure (kPa)', 'Temperature x Pressure', 'Material Fusion Metric', 'Material Transformation Metric', 'Quality Rating'] with the target variable being Temperature x Pressure having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/manufacturing.csv_preprocessed.csv')
target_variable = 'Temperature x Pressure'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named manufacturing.csv having columns ['Temperature (°C)', 'Pressure (kPa)', 'Temperature x Pressure', 'Material Fusion Metric', 'Material Transformation Metric', 'Quality Rating'] with the target variable being Temperature x Pressure having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/manufacturing.csv_preprocessed.csv')
target_variable = 'Temperature x Pressure'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named manufacturing.csv having columns ['Temperature (°C)', 'Pressure (kPa)', 'Temperature x Pressure', 'Material Fusion Metric', 'Material Transformation Metric', 'Quality Rating'] with the target variable being Temperature x Pressure having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/manufacturing.csv_preprocessed.csv')
target_variable = 'Temperature x Pressure'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named manufacturing.csv having columns ['Temperature (°C)', 'Pressure (kPa)', 'Temperature x Pressure', 'Material Fusion Metric', 'Material Transformation Metric', 'Quality Rating'] with the target variable being Temperature x Pressure having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/manufacturing.csv_preprocessed.csv')
target_variable = 'Temperature x Pressure'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named manufacturing.csv having columns ['Temperature (°C)', 'Pressure (kPa)', 'Temperature x Pressure', 'Material Fusion Metric', 'Material Transformation Metric', 'Quality Rating'] with the target variable being Temperature x Pressure having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/manufacturing.csv_preprocessed.csv')
target_variable = 'Temperature x Pressure'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named manufacturing.csv having columns ['Temperature (°C)', 'Pressure (kPa)', 'Temperature x Pressure', 'Material Fusion Metric', 'Material Transformation Metric', 'Quality Rating'] with the target variable being Temperature x Pressure having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/manufacturing.csv_preprocessed.csv')
target_variable = 'Temperature x Pressure'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named manufacturing.csv having columns ['Temperature (°C)', 'Pressure (kPa)', 'Temperature x Pressure', 'Material Fusion Metric', 'Material Transformation Metric', 'Quality Rating'] with the target variable being Temperature x Pressure having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/manufacturing.csv_preprocessed.csv')
target_variable = 'Temperature x Pressure'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named manufacturing.csv having columns ['Temperature (°C)', 'Pressure (kPa)', 'Temperature x Pressure', 'Material Fusion Metric', 'Material Transformation Metric', 'Quality Rating'] with the target variable being Temperature x Pressure having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/manufacturing.csv_preprocessed.csv')
target_variable = 'Temperature x Pressure'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named manufacturing.csv having columns ['Temperature (°C)', 'Pressure (kPa)', 'Temperature x Pressure', 'Material Fusion Metric', 'Material Transformation Metric', 'Quality Rating'] with the target variable being Temperature x Pressure having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/manufacturing.csv_preprocessed.csv')
target_variable = 'Temperature x Pressure'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named manufacturing.csv having columns ['Temperature (°C)', 'Pressure (kPa)', 'Temperature x Pressure', 'Material Fusion Metric', 'Material Transformation Metric', 'Quality Rating'] with the target variable being Temperature x Pressure having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/manufacturing.csv_preprocessed.csv')
target_variable = 'Temperature x Pressure'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named manufacturing.csv having columns ['Temperature (°C)', 'Pressure (kPa)', 'Temperature x Pressure', 'Material Fusion Metric', 'Material Transformation Metric', 'Quality Rating'] with the target variable being Temperature x Pressure having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/manufacturing.csv_preprocessed.csv')
target_variable = 'Temperature x Pressure'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named multiple_linear_regression_dataset.csv having columns ['age', 'experience', 'income'] with the target variable being age having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/multiple_linear_regression_dataset.csv_preprocessed.csv')
target_variable = 'age'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named multiple_linear_regression_dataset.csv having columns ['age', 'experience', 'income'] with the target variable being age having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/multiple_linear_regression_dataset.csv_preprocessed.csv')
target_variable = 'age'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named multiple_linear_regression_dataset.csv having columns ['age', 'experience', 'income'] with the target variable being age having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/multiple_linear_regression_dataset.csv_preprocessed.csv')
target_variable = 'age'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named multiple_linear_regression_dataset.csv having columns ['age', 'experience', 'income'] with the target variable being age having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/multiple_linear_regression_dataset.csv_preprocessed.csv')
target_variable = 'age'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named multiple_linear_regression_dataset.csv having columns ['age', 'experience', 'income'] with the target variable being age having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/multiple_linear_regression_dataset.csv_preprocessed.csv')
target_variable = 'age'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named multiple_linear_regression_dataset.csv having columns ['age', 'experience', 'income'] with the target variable being age having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/multiple_linear_regression_dataset.csv_preprocessed.csv')
target_variable = 'age'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named multiple_linear_regression_dataset.csv having columns ['age', 'experience', 'income'] with the target variable being age having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/multiple_linear_regression_dataset.csv_preprocessed.csv')
target_variable = 'age'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named multiple_linear_regression_dataset.csv having columns ['age', 'experience', 'income'] with the target variable being age having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/multiple_linear_regression_dataset.csv_preprocessed.csv')
target_variable = 'age'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named multiple_linear_regression_dataset.csv having columns ['age', 'experience', 'income'] with the target variable being age having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/multiple_linear_regression_dataset.csv_preprocessed.csv')
target_variable = 'age'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named multiple_linear_regression_dataset.csv having columns ['age', 'experience', 'income'] with the target variable being age having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/multiple_linear_regression_dataset.csv_preprocessed.csv')
target_variable = 'age'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named multiple_linear_regression_dataset.csv having columns ['age', 'experience', 'income'] with the target variable being age having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/multiple_linear_regression_dataset.csv_preprocessed.csv')
target_variable = 'age'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named multiple_linear_regression_dataset.csv having columns ['age', 'experience', 'income'] with the target variable being age having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/multiple_linear_regression_dataset.csv_preprocessed.csv')
target_variable = 'age'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named multiple_linear_regression_dataset.csv having columns ['age', 'experience', 'income'] with the target variable being experience having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/multiple_linear_regression_dataset.csv_preprocessed.csv')
target_variable = 'experience'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named multiple_linear_regression_dataset.csv having columns ['age', 'experience', 'income'] with the target variable being experience having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/multiple_linear_regression_dataset.csv_preprocessed.csv')
target_variable = 'experience'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named multiple_linear_regression_dataset.csv having columns ['age', 'experience', 'income'] with the target variable being experience having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/multiple_linear_regression_dataset.csv_preprocessed.csv')
target_variable = 'experience'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named multiple_linear_regression_dataset.csv having columns ['age', 'experience', 'income'] with the target variable being experience having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/multiple_linear_regression_dataset.csv_preprocessed.csv')
target_variable = 'experience'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named multiple_linear_regression_dataset.csv having columns ['age', 'experience', 'income'] with the target variable being experience having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/multiple_linear_regression_dataset.csv_preprocessed.csv')
target_variable = 'experience'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named multiple_linear_regression_dataset.csv having columns ['age', 'experience', 'income'] with the target variable being experience having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/multiple_linear_regression_dataset.csv_preprocessed.csv')
target_variable = 'experience'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named multiple_linear_regression_dataset.csv having columns ['age', 'experience', 'income'] with the target variable being experience having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/multiple_linear_regression_dataset.csv_preprocessed.csv')
target_variable = 'experience'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named multiple_linear_regression_dataset.csv having columns ['age', 'experience', 'income'] with the target variable being experience having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/multiple_linear_regression_dataset.csv_preprocessed.csv')
target_variable = 'experience'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named multiple_linear_regression_dataset.csv having columns ['age', 'experience', 'income'] with the target variable being experience having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/multiple_linear_regression_dataset.csv_preprocessed.csv')
target_variable = 'experience'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named multiple_linear_regression_dataset.csv having columns ['age', 'experience', 'income'] with the target variable being experience having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/multiple_linear_regression_dataset.csv_preprocessed.csv')
target_variable = 'experience'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named multiple_linear_regression_dataset.csv having columns ['age', 'experience', 'income'] with the target variable being experience having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/multiple_linear_regression_dataset.csv_preprocessed.csv')
target_variable = 'experience'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named multiple_linear_regression_dataset.csv having columns ['age', 'experience', 'income'] with the target variable being experience having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/multiple_linear_regression_dataset.csv_preprocessed.csv')
target_variable = 'experience'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named multiple_linear_regression_dataset.csv having columns ['age', 'experience', 'income'] with the target variable being income having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/multiple_linear_regression_dataset.csv_preprocessed.csv')
target_variable = 'income'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named multiple_linear_regression_dataset.csv having columns ['age', 'experience', 'income'] with the target variable being income having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/multiple_linear_regression_dataset.csv_preprocessed.csv')
target_variable = 'income'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named multiple_linear_regression_dataset.csv having columns ['age', 'experience', 'income'] with the target variable being income having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/multiple_linear_regression_dataset.csv_preprocessed.csv')
target_variable = 'income'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named multiple_linear_regression_dataset.csv having columns ['age', 'experience', 'income'] with the target variable being income having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/multiple_linear_regression_dataset.csv_preprocessed.csv')
target_variable = 'income'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named multiple_linear_regression_dataset.csv having columns ['age', 'experience', 'income'] with the target variable being income having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/multiple_linear_regression_dataset.csv_preprocessed.csv')
target_variable = 'income'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named multiple_linear_regression_dataset.csv having columns ['age', 'experience', 'income'] with the target variable being income having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/multiple_linear_regression_dataset.csv_preprocessed.csv')
target_variable = 'income'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named multiple_linear_regression_dataset.csv having columns ['age', 'experience', 'income'] with the target variable being income having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/multiple_linear_regression_dataset.csv_preprocessed.csv')
target_variable = 'income'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named multiple_linear_regression_dataset.csv having columns ['age', 'experience', 'income'] with the target variable being income having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/multiple_linear_regression_dataset.csv_preprocessed.csv')
target_variable = 'income'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named multiple_linear_regression_dataset.csv having columns ['age', 'experience', 'income'] with the target variable being income having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/multiple_linear_regression_dataset.csv_preprocessed.csv')
target_variable = 'income'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named multiple_linear_regression_dataset.csv having columns ['age', 'experience', 'income'] with the target variable being income having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/multiple_linear_regression_dataset.csv_preprocessed.csv')
target_variable = 'income'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named multiple_linear_regression_dataset.csv having columns ['age', 'experience', 'income'] with the target variable being income having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/multiple_linear_regression_dataset.csv_preprocessed.csv')
target_variable = 'income'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named multiple_linear_regression_dataset.csv having columns ['age', 'experience', 'income'] with the target variable being income having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/multiple_linear_regression_dataset.csv_preprocessed.csv')
target_variable = 'income'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being Pop having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'Pop'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being Pop having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'Pop'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being Pop having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'Pop'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being Pop having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'Pop'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being Pop having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'Pop'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being Pop having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'Pop'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being Pop having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'Pop'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being Pop having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'Pop'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being Pop having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'Pop'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being Pop having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'Pop'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being Pop having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'Pop'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being Pop having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'Pop'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being hdlngth having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'hdlngth'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being hdlngth having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'hdlngth'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being hdlngth having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'hdlngth'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being hdlngth having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'hdlngth'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being hdlngth having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'hdlngth'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being hdlngth having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'hdlngth'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being hdlngth having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'hdlngth'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being hdlngth having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'hdlngth'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being hdlngth having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'hdlngth'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being hdlngth having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'hdlngth'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being hdlngth having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'hdlngth'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being hdlngth having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'hdlngth'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being skullw having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'skullw'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being skullw having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'skullw'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being skullw having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'skullw'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being skullw having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'skullw'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being skullw having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'skullw'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being skullw having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'skullw'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being skullw having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'skullw'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being skullw having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'skullw'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being skullw having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'skullw'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being skullw having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'skullw'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being skullw having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'skullw'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being skullw having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'skullw'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being totlngth having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'totlngth'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being totlngth having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'totlngth'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being totlngth having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'totlngth'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being totlngth having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'totlngth'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being totlngth having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'totlngth'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being totlngth having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'totlngth'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being totlngth having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'totlngth'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being totlngth having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'totlngth'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being totlngth having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'totlngth'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being totlngth having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'totlngth'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being totlngth having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'totlngth'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being totlngth having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'totlngth'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being taill having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'taill'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being taill having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'taill'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being taill having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'taill'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being taill having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'taill'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being taill having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'taill'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being taill having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'taill'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being taill having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'taill'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being taill having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'taill'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being taill having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'taill'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being taill having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'taill'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being taill having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'taill'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being taill having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'taill'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being footlgth having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'footlgth'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being footlgth having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'footlgth'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being footlgth having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'footlgth'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being footlgth having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'footlgth'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being footlgth having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'footlgth'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being footlgth having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'footlgth'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being footlgth having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'footlgth'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being footlgth having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'footlgth'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being footlgth having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'footlgth'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being footlgth having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'footlgth'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being footlgth having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'footlgth'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being footlgth having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'footlgth'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being earconch having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'earconch'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being earconch having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'earconch'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being earconch having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'earconch'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being earconch having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'earconch'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being earconch having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'earconch'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being earconch having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'earconch'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being earconch having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'earconch'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being earconch having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'earconch'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being earconch having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'earconch'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being earconch having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'earconch'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being earconch having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'earconch'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being earconch having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'earconch'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being eye having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'eye'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being eye having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'eye'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being eye having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'eye'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being eye having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'eye'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being eye having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'eye'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being eye having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'eye'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being eye having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'eye'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being eye having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'eye'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being eye having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'eye'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being eye having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'eye'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being eye having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'eye'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being eye having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'eye'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being chest having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'chest'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being chest having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'chest'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being chest having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'chest'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being chest having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'chest'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being chest having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'chest'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being chest having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'chest'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being chest having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'chest'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being chest having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'chest'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being chest having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'chest'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being chest having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'chest'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being chest having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'chest'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being chest having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'chest'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being belly having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'belly'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being belly having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'belly'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being belly having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'belly'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being belly having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'belly'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being belly having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'belly'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being belly having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'belly'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being belly having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'belly'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being belly having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'belly'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being belly having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'belly'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being belly having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'belly'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being belly having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'belly'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named possum.csv having columns ['case', 'site', 'Pop', 'sex', 'age', 'hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] with the target variable being belly having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/possum.csv_preprocessed.csv')
target_variable = 'belly'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being song_popularity having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'song_popularity'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being song_popularity having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'song_popularity'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being song_popularity having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'song_popularity'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being song_popularity having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'song_popularity'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being song_popularity having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'song_popularity'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being song_popularity having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'song_popularity'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being song_popularity having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'song_popularity'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being song_popularity having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'song_popularity'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being song_popularity having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'song_popularity'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being song_popularity having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'song_popularity'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being song_popularity having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'song_popularity'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being song_popularity having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'song_popularity'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being song_duration_ms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'song_duration_ms'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being song_duration_ms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'song_duration_ms'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being song_duration_ms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'song_duration_ms'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being song_duration_ms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'song_duration_ms'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being song_duration_ms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'song_duration_ms'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being song_duration_ms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'song_duration_ms'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being song_duration_ms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'song_duration_ms'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being song_duration_ms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'song_duration_ms'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being song_duration_ms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'song_duration_ms'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being song_duration_ms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'song_duration_ms'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being song_duration_ms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'song_duration_ms'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being song_duration_ms having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'song_duration_ms'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being acousticness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'acousticness'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being acousticness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'acousticness'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being acousticness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'acousticness'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being acousticness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'acousticness'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being acousticness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'acousticness'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being acousticness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'acousticness'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being acousticness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'acousticness'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being acousticness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'acousticness'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being acousticness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'acousticness'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being acousticness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'acousticness'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being acousticness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'acousticness'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being acousticness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'acousticness'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being danceability having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'danceability'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being danceability having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'danceability'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being danceability having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'danceability'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being danceability having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'danceability'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being danceability having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'danceability'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being danceability having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'danceability'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being danceability having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'danceability'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being danceability having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'danceability'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being danceability having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'danceability'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being danceability having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'danceability'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being danceability having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'danceability'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being danceability having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'danceability'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being energy having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'energy'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being energy having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'energy'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being energy having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'energy'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being energy having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'energy'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being energy having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'energy'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being energy having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'energy'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being energy having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'energy'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being energy having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'energy'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being energy having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'energy'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being energy having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'energy'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being energy having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'energy'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being energy having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'energy'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being instrumentalness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'instrumentalness'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being instrumentalness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'instrumentalness'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being instrumentalness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'instrumentalness'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being instrumentalness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'instrumentalness'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being instrumentalness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'instrumentalness'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being instrumentalness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'instrumentalness'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being instrumentalness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'instrumentalness'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being instrumentalness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'instrumentalness'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being instrumentalness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'instrumentalness'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being instrumentalness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'instrumentalness'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being instrumentalness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'instrumentalness'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being instrumentalness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'instrumentalness'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being liveness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'liveness'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being liveness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'liveness'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being liveness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'liveness'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being liveness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'liveness'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being liveness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'liveness'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being liveness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'liveness'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being liveness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'liveness'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being liveness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'liveness'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being liveness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'liveness'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being liveness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'liveness'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being liveness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'liveness'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being liveness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'liveness'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being loudness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'loudness'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being loudness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'loudness'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being loudness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'loudness'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being loudness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'loudness'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being loudness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'loudness'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being loudness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'loudness'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being loudness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'loudness'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being loudness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'loudness'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being loudness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'loudness'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being loudness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'loudness'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being loudness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'loudness'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being loudness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'loudness'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being speechiness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'speechiness'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being speechiness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'speechiness'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being speechiness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'speechiness'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being speechiness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'speechiness'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being speechiness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'speechiness'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being speechiness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'speechiness'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being speechiness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'speechiness'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being speechiness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'speechiness'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being speechiness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'speechiness'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being speechiness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'speechiness'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being speechiness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'speechiness'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being speechiness having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'speechiness'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being tempo having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'tempo'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being tempo having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'tempo'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being tempo having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'tempo'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being tempo having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'tempo'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being tempo having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'tempo'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being tempo having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'tempo'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being tempo having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'tempo'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being tempo having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'tempo'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being tempo having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'tempo'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being tempo having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'tempo'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being tempo having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'tempo'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being tempo having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'tempo'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being audio_valence having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'audio_valence'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being audio_valence having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'audio_valence'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being audio_valence having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'audio_valence'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being audio_valence having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'audio_valence'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being audio_valence having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'audio_valence'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being audio_valence having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'audio_valence'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being audio_valence having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'audio_valence'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being audio_valence having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'audio_valence'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being audio_valence having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'audio_valence'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being audio_valence having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'audio_valence'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being audio_valence having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'audio_valence'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named song_data.csv having columns ['song_name', 'song_popularity', 'song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature', 'audio_valence'] with the target variable being audio_valence having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/song_data.csv_preprocessed.csv')
target_variable = 'audio_valence'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Endurance having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Endurance'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Endurance having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Endurance'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Endurance having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Endurance'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Endurance having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Endurance'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Endurance having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Endurance'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Endurance having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Endurance'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Endurance having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Endurance'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Endurance having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Endurance'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Endurance having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Endurance'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Endurance having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Endurance'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Endurance having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Endurance'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Endurance having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Endurance'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Strength having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Strength'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Strength having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Strength'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Strength having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Strength'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Strength having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Strength'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Strength having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Strength'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Strength having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Strength'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Strength having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Strength'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Strength having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Strength'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Strength having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Strength'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Strength having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Strength'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Strength having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Strength'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Strength having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Strength'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Power having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Power'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Power having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Power'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Power having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Power'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Power having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Power'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Power having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Power'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Power having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Power'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Power having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Power'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Power having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Power'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Power having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Power'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Power having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Power'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Power having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Power'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Power having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Power'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Speed having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Speed'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Speed having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Speed'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Speed having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Speed'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Speed having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Speed'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Speed having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Speed'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Speed having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Speed'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Speed having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Speed'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Speed having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Speed'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Speed having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Speed'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Speed having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Speed'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Speed having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Speed'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Speed having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Speed'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Agility having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Agility'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Agility having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Agility'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Agility having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Agility'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Agility having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Agility'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Agility having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Agility'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Agility having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Agility'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Agility having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Agility'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Agility having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Agility'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Agility having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Agility'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Agility having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Agility'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Agility having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Agility'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Agility having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Agility'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Flexibility having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Flexibility'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Flexibility having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Flexibility'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Flexibility having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Flexibility'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Flexibility having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Flexibility'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Flexibility having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Flexibility'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Flexibility having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Flexibility'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Flexibility having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Flexibility'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Flexibility having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Flexibility'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Flexibility having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Flexibility'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Flexibility having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Flexibility'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Flexibility having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Flexibility'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Flexibility having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Flexibility'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Nerve having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Nerve'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Nerve having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Nerve'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Nerve having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Nerve'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Nerve having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Nerve'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Nerve having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Nerve'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Nerve having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Nerve'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Nerve having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Nerve'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Nerve having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Nerve'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Nerve having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Nerve'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Nerve having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Nerve'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Nerve having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Nerve'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Nerve having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Nerve'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Durability having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Durability'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Durability having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Durability'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Durability having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Durability'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Durability having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Durability'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Durability having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Durability'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Durability having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Durability'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Durability having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Durability'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Durability having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Durability'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Durability having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Durability'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Durability having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Durability'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Durability having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Durability'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Durability having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Durability'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Hand-eye coordination having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Hand-eye coordination'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Hand-eye coordination having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Hand-eye coordination'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Hand-eye coordination having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Hand-eye coordination'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Hand-eye coordination having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Hand-eye coordination'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Hand-eye coordination having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Hand-eye coordination'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Hand-eye coordination having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Hand-eye coordination'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Hand-eye coordination having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Hand-eye coordination'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Hand-eye coordination having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Hand-eye coordination'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Hand-eye coordination having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Hand-eye coordination'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Hand-eye coordination having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Hand-eye coordination'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Hand-eye coordination having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Hand-eye coordination'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Hand-eye coordination having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Hand-eye coordination'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Analytical Aptitude having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Analytical Aptitude'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Analytical Aptitude having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Analytical Aptitude'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Analytical Aptitude having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Analytical Aptitude'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Analytical Aptitude having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Analytical Aptitude'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Analytical Aptitude having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Analytical Aptitude'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Analytical Aptitude having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Analytical Aptitude'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Analytical Aptitude having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Analytical Aptitude'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Analytical Aptitude having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Analytical Aptitude'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Analytical Aptitude having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Analytical Aptitude'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Analytical Aptitude having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Analytical Aptitude'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Analytical Aptitude having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Analytical Aptitude'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named toughestsport.csv having columns ['SPORT', 'Endurance', 'Strength', 'Power', 'Speed', 'Agility', 'Flexibility', 'Nerve', 'Durability', 'Hand-eye coordination', 'Analytical Aptitude', 'Total', 'Rank'] with the target variable being Analytical Aptitude having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/toughestsport.csv_preprocessed.csv')
target_variable = 'Analytical Aptitude'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named train.csv having columns ['x', 'y'] with the target variable being y having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/train.csv_preprocessed.csv')
target_variable = 'y'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named train.csv having columns ['x', 'y'] with the target variable being y having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/train.csv_preprocessed.csv')
target_variable = 'y'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named train.csv having columns ['x', 'y'] with the target variable being y having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/train.csv_preprocessed.csv')
target_variable = 'y'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named train.csv having columns ['x', 'y'] with the target variable being y having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/train.csv_preprocessed.csv')
target_variable = 'y'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named train.csv having columns ['x', 'y'] with the target variable being y having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/train.csv_preprocessed.csv')
target_variable = 'y'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named train.csv having columns ['x', 'y'] with the target variable being y having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/train.csv_preprocessed.csv')
target_variable = 'y'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named train.csv having columns ['x', 'y'] with the target variable being y having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/train.csv_preprocessed.csv')
target_variable = 'y'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named train.csv having columns ['x', 'y'] with the target variable being y having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/train.csv_preprocessed.csv')
target_variable = 'y'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named train.csv having columns ['x', 'y'] with the target variable being y having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/train.csv_preprocessed.csv')
target_variable = 'y'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named train.csv having columns ['x', 'y'] with the target variable being y having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/train.csv_preprocessed.csv')
target_variable = 'y'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named train.csv having columns ['x', 'y'] with the target variable being y having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/train.csv_preprocessed.csv')
target_variable = 'y'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named train.csv having columns ['x', 'y'] with the target variable being y having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/train.csv_preprocessed.csv')
target_variable = 'y'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named train_ML_IOT.csv having columns ['DateTime', 'Junction', 'Vehicles', 'ID'] with the target variable being Vehicles having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/train_ML_IOT.csv_preprocessed.csv')
target_variable = 'Vehicles'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named train_ML_IOT.csv having columns ['DateTime', 'Junction', 'Vehicles', 'ID'] with the target variable being Vehicles having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/train_ML_IOT.csv_preprocessed.csv')
target_variable = 'Vehicles'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named train_ML_IOT.csv having columns ['DateTime', 'Junction', 'Vehicles', 'ID'] with the target variable being Vehicles having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/train_ML_IOT.csv_preprocessed.csv')
target_variable = 'Vehicles'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named train_ML_IOT.csv having columns ['DateTime', 'Junction', 'Vehicles', 'ID'] with the target variable being Vehicles having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/train_ML_IOT.csv_preprocessed.csv')
target_variable = 'Vehicles'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named train_ML_IOT.csv having columns ['DateTime', 'Junction', 'Vehicles', 'ID'] with the target variable being Vehicles having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/train_ML_IOT.csv_preprocessed.csv')
target_variable = 'Vehicles'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named train_ML_IOT.csv having columns ['DateTime', 'Junction', 'Vehicles', 'ID'] with the target variable being Vehicles having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/train_ML_IOT.csv_preprocessed.csv')
target_variable = 'Vehicles'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named train_ML_IOT.csv having columns ['DateTime', 'Junction', 'Vehicles', 'ID'] with the target variable being Vehicles having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/train_ML_IOT.csv_preprocessed.csv')
target_variable = 'Vehicles'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named train_ML_IOT.csv having columns ['DateTime', 'Junction', 'Vehicles', 'ID'] with the target variable being Vehicles having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/train_ML_IOT.csv_preprocessed.csv')
target_variable = 'Vehicles'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named train_ML_IOT.csv having columns ['DateTime', 'Junction', 'Vehicles', 'ID'] with the target variable being Vehicles having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/train_ML_IOT.csv_preprocessed.csv')
target_variable = 'Vehicles'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named train_ML_IOT.csv having columns ['DateTime', 'Junction', 'Vehicles', 'ID'] with the target variable being Vehicles having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/train_ML_IOT.csv_preprocessed.csv')
target_variable = 'Vehicles'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named train_ML_IOT.csv having columns ['DateTime', 'Junction', 'Vehicles', 'ID'] with the target variable being Vehicles having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/train_ML_IOT.csv_preprocessed.csv')
target_variable = 'Vehicles'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named train_ML_IOT.csv having columns ['DateTime', 'Junction', 'Vehicles', 'ID'] with the target variable being Vehicles having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/train_ML_IOT.csv_preprocessed.csv')
target_variable = 'Vehicles'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named uber.csv having columns ['Unnamed: 0', 'key', 'fare_amount', 'pickup_datetime', 'pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude', 'passenger_count'] with the target variable being fare_amount having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/uber.csv_preprocessed.csv')
target_variable = 'fare_amount'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named uber.csv having columns ['Unnamed: 0', 'key', 'fare_amount', 'pickup_datetime', 'pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude', 'passenger_count'] with the target variable being fare_amount having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/uber.csv_preprocessed.csv')
target_variable = 'fare_amount'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named uber.csv having columns ['Unnamed: 0', 'key', 'fare_amount', 'pickup_datetime', 'pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude', 'passenger_count'] with the target variable being fare_amount having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/uber.csv_preprocessed.csv')
target_variable = 'fare_amount'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named uber.csv having columns ['Unnamed: 0', 'key', 'fare_amount', 'pickup_datetime', 'pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude', 'passenger_count'] with the target variable being fare_amount having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/uber.csv_preprocessed.csv')
target_variable = 'fare_amount'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named uber.csv having columns ['Unnamed: 0', 'key', 'fare_amount', 'pickup_datetime', 'pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude', 'passenger_count'] with the target variable being fare_amount having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/uber.csv_preprocessed.csv')
target_variable = 'fare_amount'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named uber.csv having columns ['Unnamed: 0', 'key', 'fare_amount', 'pickup_datetime', 'pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude', 'passenger_count'] with the target variable being fare_amount having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/uber.csv_preprocessed.csv')
target_variable = 'fare_amount'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named uber.csv having columns ['Unnamed: 0', 'key', 'fare_amount', 'pickup_datetime', 'pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude', 'passenger_count'] with the target variable being fare_amount having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/uber.csv_preprocessed.csv')
target_variable = 'fare_amount'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named uber.csv having columns ['Unnamed: 0', 'key', 'fare_amount', 'pickup_datetime', 'pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude', 'passenger_count'] with the target variable being fare_amount having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/uber.csv_preprocessed.csv')
target_variable = 'fare_amount'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named uber.csv having columns ['Unnamed: 0', 'key', 'fare_amount', 'pickup_datetime', 'pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude', 'passenger_count'] with the target variable being fare_amount having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/uber.csv_preprocessed.csv')
target_variable = 'fare_amount'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named uber.csv having columns ['Unnamed: 0', 'key', 'fare_amount', 'pickup_datetime', 'pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude', 'passenger_count'] with the target variable being fare_amount having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/uber.csv_preprocessed.csv')
target_variable = 'fare_amount'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named uber.csv having columns ['Unnamed: 0', 'key', 'fare_amount', 'pickup_datetime', 'pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude', 'passenger_count'] with the target variable being fare_amount having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/uber.csv_preprocessed.csv')
target_variable = 'fare_amount'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named uber.csv having columns ['Unnamed: 0', 'key', 'fare_amount', 'pickup_datetime', 'pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude', 'passenger_count'] with the target variable being fare_amount having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/uber.csv_preprocessed.csv')
target_variable = 'fare_amount'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named uber.csv having columns ['Unnamed: 0', 'key', 'fare_amount', 'pickup_datetime', 'pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude', 'passenger_count'] with the target variable being passenger_count having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/uber.csv_preprocessed.csv')
target_variable = 'passenger_count'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named uber.csv having columns ['Unnamed: 0', 'key', 'fare_amount', 'pickup_datetime', 'pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude', 'passenger_count'] with the target variable being passenger_count having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/uber.csv_preprocessed.csv')
target_variable = 'passenger_count'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named uber.csv having columns ['Unnamed: 0', 'key', 'fare_amount', 'pickup_datetime', 'pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude', 'passenger_count'] with the target variable being passenger_count having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/uber.csv_preprocessed.csv')
target_variable = 'passenger_count'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named uber.csv having columns ['Unnamed: 0', 'key', 'fare_amount', 'pickup_datetime', 'pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude', 'passenger_count'] with the target variable being passenger_count having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/uber.csv_preprocessed.csv')
target_variable = 'passenger_count'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named uber.csv having columns ['Unnamed: 0', 'key', 'fare_amount', 'pickup_datetime', 'pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude', 'passenger_count'] with the target variable being passenger_count having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/uber.csv_preprocessed.csv')
target_variable = 'passenger_count'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named uber.csv having columns ['Unnamed: 0', 'key', 'fare_amount', 'pickup_datetime', 'pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude', 'passenger_count'] with the target variable being passenger_count having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/uber.csv_preprocessed.csv')
target_variable = 'passenger_count'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named uber.csv having columns ['Unnamed: 0', 'key', 'fare_amount', 'pickup_datetime', 'pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude', 'passenger_count'] with the target variable being passenger_count having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/uber.csv_preprocessed.csv')
target_variable = 'passenger_count'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named uber.csv having columns ['Unnamed: 0', 'key', 'fare_amount', 'pickup_datetime', 'pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude', 'passenger_count'] with the target variable being passenger_count having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/uber.csv_preprocessed.csv')
target_variable = 'passenger_count'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named uber.csv having columns ['Unnamed: 0', 'key', 'fare_amount', 'pickup_datetime', 'pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude', 'passenger_count'] with the target variable being passenger_count having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/uber.csv_preprocessed.csv')
target_variable = 'passenger_count'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named uber.csv having columns ['Unnamed: 0', 'key', 'fare_amount', 'pickup_datetime', 'pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude', 'passenger_count'] with the target variable being passenger_count having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/uber.csv_preprocessed.csv')
target_variable = 'passenger_count'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named uber.csv having columns ['Unnamed: 0', 'key', 'fare_amount', 'pickup_datetime', 'pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude', 'passenger_count'] with the target variable being passenger_count having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/uber.csv_preprocessed.csv')
target_variable = 'passenger_count'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named uber.csv having columns ['Unnamed: 0', 'key', 'fare_amount', 'pickup_datetime', 'pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude', 'passenger_count'] with the target variable being passenger_count having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/uber.csv_preprocessed.csv')
target_variable = 'passenger_count'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Unnamed: 0',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Age having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Age'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Age having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Age'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Age having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Age'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Age having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Age'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Age having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Age'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Age having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Age'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Age having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Age'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Age having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Age'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Age having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Age'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Age having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Age'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Age having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Age'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Age having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Age'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Food Supply (Days) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Food Supply (Days)'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Food Supply (Days) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Food Supply (Days)'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Food Supply (Days) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Food Supply (Days)'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Food Supply (Days) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Food Supply (Days)'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Food Supply (Days) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Food Supply (Days)'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Food Supply (Days) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Food Supply (Days)'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Food Supply (Days) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Food Supply (Days)'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Food Supply (Days) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Food Supply (Days)'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Food Supply (Days) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Food Supply (Days)'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Food Supply (Days) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Food Supply (Days)'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Food Supply (Days) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Food Supply (Days)'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Food Supply (Days) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Food Supply (Days)'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Water per Day (Liters) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Water per Day (Liters)'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Water per Day (Liters) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Water per Day (Liters)'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Water per Day (Liters) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Water per Day (Liters)'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Water per Day (Liters) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Water per Day (Liters)'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Water per Day (Liters) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Water per Day (Liters)'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Water per Day (Liters) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Water per Day (Liters)'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Water per Day (Liters) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Water per Day (Liters)'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Water per Day (Liters) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Water per Day (Liters)'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Water per Day (Liters) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Water per Day (Liters)'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Water per Day (Liters) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Water per Day (Liters)'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Water per Day (Liters) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Water per Day (Liters)'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Water per Day (Liters) having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Water per Day (Liters)'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being First Aid Kits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'First Aid Kits'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being First Aid Kits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'First Aid Kits'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being First Aid Kits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'First Aid Kits'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being First Aid Kits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'First Aid Kits'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being First Aid Kits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'First Aid Kits'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being First Aid Kits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'First Aid Kits'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being First Aid Kits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'First Aid Kits'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being First Aid Kits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'First Aid Kits'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being First Aid Kits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'First Aid Kits'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being First Aid Kits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'First Aid Kits'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being First Aid Kits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'First Aid Kits'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being First Aid Kits having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'First Aid Kits'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Antibiotics having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Antibiotics'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Antibiotics having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Antibiotics'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Antibiotics having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Antibiotics'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Antibiotics having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Antibiotics'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Antibiotics having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Antibiotics'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Antibiotics having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Antibiotics'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Antibiotics having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Antibiotics'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Antibiotics having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Antibiotics'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Antibiotics having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Antibiotics'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Antibiotics having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Antibiotics'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Antibiotics having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Antibiotics'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Antibiotics having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Antibiotics'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Painkillers having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Painkillers'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Painkillers having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Painkillers'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Painkillers having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Painkillers'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Painkillers having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Painkillers'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Painkillers having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Painkillers'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Painkillers having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Painkillers'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Painkillers having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Painkillers'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Painkillers having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Painkillers'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Painkillers having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Painkillers'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Painkillers having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Painkillers'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Painkillers having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Painkillers'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Painkillers having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Painkillers'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Training Level having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Training Level'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Training Level having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Training Level'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Training Level having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Training Level'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Training Level having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Training Level'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Training Level having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Training Level'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Training Level having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Training Level'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Training Level having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Training Level'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Training Level having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Training Level'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Training Level having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Training Level'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Training Level having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Training Level'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Training Level having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Training Level'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Training Level having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Training Level'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Radios Available having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Radios Available'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Radios Available having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Radios Available'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Radios Available having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Radios Available'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Radios Available having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Radios Available'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Radios Available having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Radios Available'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Radios Available having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Radios Available'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Radios Available having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Radios Available'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Radios Available having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Radios Available'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Radios Available having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Radios Available'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Radios Available having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Radios Available'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Radios Available having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Radios Available'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Radios Available having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Radios Available'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Access to Reliable Information having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Access to Reliable Information'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Access to Reliable Information having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Access to Reliable Information'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Access to Reliable Information having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Access to Reliable Information'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Access to Reliable Information having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Access to Reliable Information'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Access to Reliable Information having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Access to Reliable Information'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Access to Reliable Information having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Access to Reliable Information'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Access to Reliable Information having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Access to Reliable Information'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Access to Reliable Information having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Access to Reliable Information'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Access to Reliable Information having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Access to Reliable Information'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Access to Reliable Information having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Access to Reliable Information'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Access to Reliable Information having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Access to Reliable Information'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Access to Reliable Information having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Access to Reliable Information'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Support Groups Available having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Support Groups Available'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Support Groups Available having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Support Groups Available'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Support Groups Available having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Support Groups Available'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Support Groups Available having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Support Groups Available'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Support Groups Available having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Support Groups Available'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Support Groups Available having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Support Groups Available'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Support Groups Available having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Support Groups Available'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Support Groups Available having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Support Groups Available'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Support Groups Available having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Support Groups Available'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Support Groups Available having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Support Groups Available'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Support Groups Available having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Support Groups Available'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Support Groups Available having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Support Groups Available'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Entertainment Available having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Entertainment Available'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Entertainment Available having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Entertainment Available'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Entertainment Available having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Entertainment Available'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Entertainment Available having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Entertainment Available'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Entertainment Available having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Entertainment Available'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Entertainment Available having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Entertainment Available'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Entertainment Available having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Entertainment Available'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Entertainment Available having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Entertainment Available'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Entertainment Available having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Entertainment Available'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Entertainment Available having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Entertainment Available'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Entertainment Available having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Entertainment Available'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named war_survival_data.csv having columns ['Name', 'Age', 'Food Supply (Days)', 'Water per Day (Liters)', 'First Aid Kits', 'Antibiotics', 'Painkillers', 'Weapons Available', 'Defensive Structures', 'Training Level', 'Radios Available', 'Access to Reliable Information', 'Support Groups Available', 'Entertainment Available'] with the target variable being Entertainment Available having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/war_survival_data.csv_preprocessed.csv')
target_variable = 'Entertainment Available'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=['Entertainment Available',target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Linear regression model based on a dataset named winequality-red.csv having columns ['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar', 'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density', 'pH', 'sulphates', 'alcohol', 'quality'] with the target variable being quality having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/winequality-red.csv_preprocessed.csv')
target_variable = 'quality'

def LinearRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    param_grid = {'fit_intercept': [True, False]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LinearRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Ridge regression model based on a dataset named winequality-red.csv having columns ['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar', 'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density', 'pH', 'sulphates', 'alcohol', 'quality'] with the target variable being quality having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/winequality-red.csv_preprocessed.csv')
target_variable = 'quality'

def RidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Ridge()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Lasso regression model based on a dataset named winequality-red.csv having columns ['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar', 'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density', 'pH', 'sulphates', 'alcohol', 'quality'] with the target variable being quality having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/winequality-red.csv_preprocessed.csv')
target_variable = 'quality'

def LassoRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = Lasso()
    param_grid = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = LassoRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning Bayesian regression model based on a dataset named winequality-red.csv having columns ['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar', 'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density', 'pH', 'sulphates', 'alcohol', 'quality'] with the target variable being quality having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/winequality-red.csv_preprocessed.csv')
target_variable = 'quality'

def BayesianRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = BayesianRidge()
    param_grid = {'lambda_1': [1e-6, 1e-4, 1e-2],'lambda_2': [1e-6, 1e-4, 1e-2],'tol': [1e-3, 1e-4, 1e-5],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = BayesianRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SGD regression model based on a dataset named winequality-red.csv having columns ['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar', 'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density', 'pH', 'sulphates', 'alcohol', 'quality'] with the target variable being quality having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/winequality-red.csv_preprocessed.csv')
target_variable = 'quality'

def SGDRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SGDRegressor()
    param_grid = {'eta': ['constant', 'invscaling'], 'alpha': [0.0001, 0.001, 0.01],'loss': ['squared_loss', 'huber_loss']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SGDRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KernelRidge regression model based on a dataset named winequality-red.csv having columns ['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar', 'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density', 'pH', 'sulphates', 'alcohol', 'quality'] with the target variable being quality having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.kernel_ridge import KernelRidge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/winequality-red.csv_preprocessed.csv')
target_variable = 'quality'

def KernelRidgeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KernelRidge()
    param_grid = {'alpha': [0.001, 0.01, 0.1, 1], 'gamma': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KernelRidgeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning SVM regression model based on a dataset named winequality-red.csv having columns ['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar', 'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density', 'pH', 'sulphates', 'alcohol', 'quality'] with the target variable being quality having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.svm.SVR import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/winequality-red.csv_preprocessed.csv')
target_variable = 'quality'

def SVMRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = SVR()
    param_grid = {'C': [0.1, 1, 10], 'kernel': ['rbf', 'linear', 'poly'], 'gamma': [0.1, 1, 10], 'epsilon': [0.001, 0.01, 0.1],}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = SVMRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning KNeighbors regression model based on a dataset named winequality-red.csv having columns ['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar', 'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density', 'pH', 'sulphates', 'alcohol', 'quality'] with the target variable being quality having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/winequality-red.csv_preprocessed.csv')
target_variable = 'quality'

def KNeighborsRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = KNeighborsRegressor()
    param_grid = {'n_neighbors': [5, 10, 15], 'weights': ['uniform', 'distance'], 'metric': ['minkowski', 'euclidean', 'manhattan']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = KNeighborsRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning GaussianProcessRegressor regression model based on a dataset named winequality-red.csv having columns ['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar', 'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density', 'pH', 'sulphates', 'alcohol', 'quality'] with the target variable being quality having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/winequality-red.csv_preprocessed.csv')
target_variable = 'quality'

def GaussianProcessRegressorRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = GaussianProcessRegressor()
    param_grid = {'kernel': ['rbf', 'matern', 'exponential'], 'n_restarts_optimizer': [0, 2, 5], }
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = GaussianProcessRegressorRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning DecisionTree regression model based on a dataset named winequality-red.csv having columns ['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar', 'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density', 'pH', 'sulphates', 'alcohol', 'quality'] with the target variable being quality having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/winequality-red.csv_preprocessed.csv')
target_variable = 'quality'

def DecisionTreeRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = DecisionTreeRegressor()
    param_grid = {'criterion': ['gini', 'entropy'], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = DecisionTreeRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning MLP regression model based on a dataset named winequality-red.csv having columns ['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar', 'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density', 'pH', 'sulphates', 'alcohol', 'quality'] with the target variable being quality having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/winequality-red.csv_preprocessed.csv')
target_variable = 'quality'

def MLPRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = MLPRegressor()
    param_grid = {'hidden_layer_sizes': [(100,), (50, 50), (100, 50)], 'activation': ['relu', 'tanh', 'logistic'], 'alpha': [0.0001, 0.001, 0.01], 'solver': ['adam', 'lbfgs']}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = MLPRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
"Write python functions to make a machine learning RandomForest regression model based on a dataset named winequality-red.csv having columns ['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar', 'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density', 'pH', 'sulphates', 'alcohol', 'quality'] with the target variable being quality having the regression evaluation metrics mse,mae,r2,rmse","
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_error


df = pd.read_csv('./csv_data/winequality-red.csv_preprocessed.csv')
target_variable = 'quality'

def RandomForestRegressionModel(df, target_variable):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    param_grid = {'n_estimators': [100, 200, 500], 'max_depth': [3, 5, 8], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
    gs = GridSearchCV(model, param_grid, cv=5)
    gs.fit(X_train, y_train)
    model = gs.best_estimator_
    return model

def evaluate_regression(model, df):
    X = df.drop(columns=[target_variable])
    y = df[target_variable]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5
    return mse, r2, mae, rmse

model = RandomForestRegressionModel(df, target_variable=target_variable)

mse, r2, mae, rmse = evaluate_regression(model, df)

print(""MSE for the Regression model: ""+str(mse))
print(""MAE for the Regression model: ""+str(mae))
print(""R2 for the Regression model: ""+str(r2))
print(""RMSE for the Regression model: ""+str(rmse))
"
